<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nikhil's e-Crib</title>
    <description>rsnk's blog?'</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 01 Dec 2016 17:56:56 +0530</pubDate>
    <lastBuildDate>Thu, 01 Dec 2016 17:56:56 +0530</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>重启uwsgi的几种方法</title>
        <description>&lt;p&gt;There are several ways to make uWSGI gracefully restart.
有几种方法完美重启uWSGI。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;using kill to send the signal&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用kill发送信号&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -HUP &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cat /tmp/project-master.pid&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;好用）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;or the convenience option –reload&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或者使用简单选项 –reload&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uwsgi --reload /tmp/project-master.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;or if uwsgi was started with touch-reload=/tmp/somefile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或者，如果uwsgi是使用touch-reload=/tmp/somefile启动&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch /tmp/somefile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Or from your application, in Python:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或者在Python程序里：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;uwsgi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意，如果要使用pid，需要在uwsgi启动参数中指定 –pidfile，如：
&lt;code class=&quot;highlighter-rouge&quot;&gt;#/etc/rc.local 修改自启动&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/uwsgi /var/www/html/mz_uwsgi.ini --pidfile /tmp/uwsgi.pid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;比reboot服务器方便。&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Nov 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2016/11/25/restart-uwsgi.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2016/11/25/restart-uwsgi.html</guid>
        
        <category>nginx</category>
        
        <category>uwsgi</category>
        
        <category>django</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>二零一六中秋节  </title>
        <description>&lt;p&gt;今年中秋节没回家，自己在上海过节，现在是秋天时间，经常下雨，没到下雨天气就会冷一截。在博客上我就随便扯几句不相干的话。&lt;/p&gt;

&lt;p&gt;一个公司对产品的定位一定要明确，各岗位的人一定要各司其职，如果市场的人来参与技术选型那注定要成为失败的产品，而作为技术工作者的人来说会承担更多的压力和不必要的挑战。我觉得应该有的状态是，各部门知道自己要的是什么，具体方案实施要由负责这个工作的人和部门实现。&lt;/p&gt;

&lt;p&gt;阿里巴巴的月饼门事件，我想说不把人才放在第一位的公司，官僚气息很重的公司，必定会成为它走下坡路的起点。不管是政府还是公司，领导只做形象工程肯定不行。&lt;/p&gt;

&lt;p&gt;腾讯的微信服务号又坑了我一次，openID是和服务号绑定的，一个APP下的一个微信用户有一个openID，所以腾讯出了一个unionID，可以这么举例：我有很多会员卡，每个会员卡都有自己的卡号，突然有一天万达集团的多家门店合作办理会员卡了。这样我有一张会员卡就可以在万达的各种场所享受优惠，这个会员号是我在万达集团下的，而每个场所下我也有自己的会员号，与此同时，万达集团也能有效的获得整个集团所拥有的真实会员的数量。这当然是好事，而我要做的是升级数据库表，重新规划表字段，同事还要做备份，数据修改不能出错，一系列的坑。&lt;/p&gt;

&lt;p&gt;差不多了，去吃饭。&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Sep 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//life/2016/09/15/mid-autumn.html</link>
        <guid isPermaLink="true">http://localhost:4000//life/2016/09/15/mid-autumn.html</guid>
        
        <category>blog</category>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>Ionic应用图标和启动页面的配置</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;手机app开发一般都有一个图标和启动页。为了适合不同尺寸的手机，所以配置了不同大小的图片，下面是制作不同尺寸大小图片的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创建一个项目的时候还一般都没有添加platform，在命令行中，切换到当前项目目录下，为项目添加platform，执行ionic platform add android或ionic platform add ios。添加platform后，ionic会给项目添加默认的icon和splash。在resources目录下。&lt;/p&gt;

&lt;p&gt;第一步：把resources目录下默认的icon和splash图标换成当前APP对应的图标。把resources目录下android和ios文件夹删除。&lt;/p&gt;

&lt;p&gt;第二部：在命令行中，执行ionic resources命令，这时会自动生成当前图片对应的icon和splash不同大小的图标。&lt;/p&gt;

&lt;p&gt;需要注意的地方：这目录名字和图像文件名字必须是这样的，不能是其他名字，否则生成不了。图像文件格式可以是.png、.psd、.ai格式；icon图像文件大小最小192×192 px，且不能为圆角；splash图像文件大小最小2208x2208px，中间区域1200x1200px。执行命令生成资源之前，一定要为项目添加android或iso platform否则会报错，执行完成之后看看android和ios的icon和splash的图标是不是都生成了。不然build的时候会报错。&lt;/p&gt;

&lt;p&gt;还有就是记得装插件哦。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic plugin add cordova-plugin-splashscreen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 08 Aug 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//html/2016/08/08/ionic-icon-splash.html</link>
        <guid isPermaLink="true">http://localhost:4000//html/2016/08/08/ionic-icon-splash.html</guid>
        
        <category>Ionic</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>JavaScript中if语句的几种优化代码的写法</title>
        <description>&lt;h3 id=&quot;一常见的三元操作符&quot;&gt;一、常见的三元操作符&lt;/h3&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;二使用and和or运算符&quot;&gt;二、使用and(&amp;amp;&amp;amp;)和or(||)运算符&lt;/h3&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;三省略大括号&quot;&gt;三、省略大括号{}&lt;/h3&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//html/2016/06/26/JavaScript-if-statement.html</link>
        <guid isPermaLink="true">http://localhost:4000//html/2016/06/26/JavaScript-if-statement.html</guid>
        
        <category>JavaScript</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>JavaScript中的json数组操作</title>
        <description>&lt;p&gt;在jquery中处理JSON数组的情况中遍历用到的比较多，但是用添加移除这些好像不是太多。
今天试过json[i].remove(),json.remove(i)之后都不行，看网页的DOM对象中好像JSON数据是以数组的形式出现的，查阅了下相关JS中数组的操作一试果然很爽。
记录下来。&lt;/p&gt;

&lt;h2 id=&quot;数组的创建&quot;&gt;数组的创建&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//创建一个数组&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//创建一个数组并指定长度，注意不是上限，是长度&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elementN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]]);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//创建一个数组并赋值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。&lt;/p&gt;

&lt;h2 id=&quot;数组的元素的访问&quot;&gt;数组的元素的访问&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testGetArrValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//获取数组的元素值&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;这是新值&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//给数组元素赋予新的值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;数组元素的添加&quot;&gt;数组元素的添加&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]]]]);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 将一个或多个新元素添加到数组结尾，并返回数组新长度&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]]]]);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]]);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回&quot;&quot;。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;数组元素的删除&quot;&gt;数组元素的删除&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//移除最后一个元素并返回该元素值&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//移除最前一个元素并返回该元素值，数组中元素自动前移&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deletePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deleteCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;数组的截取和合并&quot;&gt;数组的截取和合并&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;数组的拷贝&quot;&gt;数组的拷贝&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//返回数组的拷贝数组，注意是一个新的数组，不是指向&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//返回数组的拷贝数组，注意是一个新的数组，不是指向&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;数组元素的排序&quot;&gt;数组元素的排序&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//反转元素（最前的排到最后、最后的排到最前），返回数组地址&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//对数组元素排序，返回数组地址&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;数组元素的字符串化&quot;&gt;数组元素的字符串化&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;arrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;toLocaleString 、toString 、valueOf：可以看作是join的特殊用法，不常用&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//html/2016/06/23/javascript-json-array.html</link>
        <guid isPermaLink="true">http://localhost:4000//html/2016/06/23/javascript-json-array.html</guid>
        
        <category>JavaScript</category>
        
        <category>json</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>清洗 Git Repo 代码仓库</title>
        <description>&lt;h2 id=&quot;手动清理&quot;&gt;手动清理&lt;/h2&gt;

&lt;p&gt;如果你们的代码仓库问题比较少，只有几个不该提交的文件，可以参考 Atlassian 的一篇关于&lt;a href=&quot;https://confluence.atlassian.com/display/BITBUCKET/Maintaining+a+Git+Repository&quot;&gt;维护 Git Repo&lt;/a&gt;的文章。&lt;/p&gt;

&lt;h3 id=&quot;大致过程如下&quot;&gt;大致过程如下：&lt;/h3&gt;

&lt;p&gt;首先进行 Git 垃圾回收：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git gc --auto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其次查看 Git 仓库占用空间：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -hs .git/objects
45M .git/objects
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后找出历史中超过一定大小的文件，最后在历史中删除并且提交。如果感兴趣手动处理这个过程可以参照文章后边的链接。&lt;/p&gt;

&lt;h3 id=&quot;相关的几个命令&quot;&gt;相关的几个命令：&lt;/h3&gt;

&lt;p&gt;清理历史中的文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch ****/nohup.out' --prune-empty --tag-name-filter cat -- --all
git filter-branch --index-filter 'git rm --cached --ignore-unmatch ****/nohup.out' HEAD
git for-each-ref --format=&quot;%(refname)&quot; refs/original/ | xargs -n 1 git update-ref -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;强制提交覆盖：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reflog expire --expire=now --all
git gc --prune=now
git push --all --force
git push --tags --force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;查找大文件并清理&quot;&gt;查找大文件并清理&lt;/h2&gt;

&lt;p&gt;下载&lt;a href=&quot;https://raw.githubusercontent.com/Jack614/jalpc_jekyll_theme/gh-pages/git_find_big.sh&quot;&gt;Bash Script&lt;/a&gt;，在项目目录下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chmod 777 git_find_big.sh
$ git gc --auto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;查找大文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git_find_big.sh 
All sizes are in kB's. The pack column is the size of the object, compressed, inside the pack file.
size  pack  SHA                                       location
592   580   e3117f48bc305dd1f5ae0df3419a0ce2d9617336  media/img/emojis.jar
550   169   b594a7f59ba7ba9daebb20447a87ea4357874f43  media/js/aui/aui-dependencies.jar
518   514   22f7f9a84905aaec019dae9ea1279a9450277130  media/images/screenshots/issue-tracker-wiki.jar
337   92    1fd8ac97c9fecf74ba6246eacef8288e89b4bff5  media/js/lib/bundle.js
240   239   e0c26d9959bd583e5ef32b6206fc8abe5fea8624  media/img/featuretour/heroshot.png
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;手动清理文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push -f
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2016/06/19/clean-git-repo.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2016/06/19/clean-git-repo.html</guid>
        
        <category>Git</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>AngularJS Guide Chinese version</title>
        <description>&lt;h1 id=&quot;angularjs&quot;&gt;AngularJS&lt;/h1&gt;

&lt;p&gt;这是一个AngularJS Guide的中文分支版本，提供关于AngularJS的视频、入门、使用与论坛等中文互联网内容，这里的分类并没有完全参照英文版，也并不固定，如果你有发现新的内容需要添加新类别，直接加吧。&lt;/p&gt;

&lt;h2 id=&quot;视频&quot;&gt;视频&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://i.youku.com/u/UMzQyMDgyODk2/videos&quot;&gt;Angular教学视频youku转载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;入门指南&quot;&gt;入门指南&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2013/02/angular-web-app&quot;&gt;使用AngularJS构建大型Web应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/13471&quot;&gt;AngularJS入门教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lcllao/archive/2012/10/18/2728787.html&quot;&gt;AngularJS学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用经验&quot;&gt;使用经验&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/archive/2013/03/24/2979344.html&quot;&gt;AngularJS开发一些经验总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/archive/2012/09/11/2680659.html&quot;&gt;再谈AngularJS DI(Dependency Injection)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/archive/2013/03/27/2983806.html&quot;&gt;Angularjs的IOC Inject分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/archive/2013/05/22/3092184.html&quot;&gt;细说Angular ng-class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/archive/2013/04/16/3024843.html&quot;&gt;AngularJS Controller 间通信机制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/whitewolf/archive/2012/09/14/2684186.html&quot;&gt;AngularJS表达式-Expression&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://key232323.iteye.com/blog/1769376&quot;&gt;AngularJS关于依赖和模块与amd/cmd的区别，分享下结合使用示例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.miniasp.com/post/2013/05/12/AngularJS-ng-module-select-ngOptions-usage-samples.aspx&quot;&gt;搞懂 AngularJS 預設模組 select 標籤的 ngOptions 參數用法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.miniasp.com/post/2013/05/08/AngularJS-Intellisense-in-Visual-Studio-2012.aspx&quot;&gt;如何讓 Visual Studio 2012 支援 AngularJS 的 Intellisense&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csdn.net/article/2013-04-27/2815077-code-organization-angularjs-javascript&quot;&gt;如何组织大型JavaScript应用中的代码？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;论坛&quot;&gt;论坛&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.AngularJS.cn/&quot;&gt;AngularJS中文社区&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.angulargirl.com/bbs/forum.php&quot;&gt;angulargirl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;繁体中文翻译&lt;/p&gt;

&lt;h1 id=&quot;学习angularjs&quot;&gt;学习AngularJS&lt;/h1&gt;

&lt;p&gt;译者: 这是jmcunningham/AngularJS-Learning的简体中文翻译
我会尽量依照原文翻译 某些专有名词就不另外翻译 如果翻译错误也请提出建议指教 希望大家可以帮忙提供更多更好的AngularJS学习资源 谢谢&lt;/p&gt;

&lt;p&gt;这里提供一些学习AngularJS的部落格链接, 文章, 和影片. 这个列表还在持续成长中. 如果你有想提供的链接与资源, 欢迎提出pull request. 我也会尽量确认以下的资源是有用的(不是只有两段文字的灌水文). 如果你有更好的方法来分类这些资源, 请让我知道. 在一般主题分类中的类似文章, 我之后也会把他们另外分类出来.&lt;/p&gt;

&lt;p&gt;注意：**开头的链接是讨论ANGULAR 1.2版的新功能. 许多人希望快速了解Angular 1.2版的新功能, 所以我也会在之后开出新的分类标题. 等内容整理差不多或者1.2版分类变得太大我再来编辑, 不过现在的话Angular 1.2链接可以在两处同时看到.&lt;/p&gt;

&lt;h2 id=&quot;angular-12-的新功能&quot;&gt;Angular 1.2 的新功能&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=W13qDdJDHp8&amp;amp;feature=youtu.be&quot;&gt;**AngularJS 1.2 &amp;amp; Beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html&quot;&gt;**Error Message Minification with MinErr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2013/08/14/angularjs-routing-changes.aspx&quot;&gt;**AngularJS路由的变化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jasoncust.com/2013/08/angularjs-missing-directives-focus-blur_14.html&quot;&gt;**AngularJS缺失的指令: Focus &amp;amp; Blur&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html&quot;&gt;**Remastered Animation in AngularJS 1.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.johnpapa.net/preparing-for-animations-in-angular-1-2-0/&quot;&gt;**Preparing for Animations in Angular 1.2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.neevtech.com/blog/2013/08/17/5-cool-features-in-angularjs-1-2/&quot;&gt;**AngularJS 1.2中的5个超酷新特性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exratione.com/2013/09/replacing-jqueryslidedown-with-nganimate-in-angularjs-120/&quot;&gt;**在AngularJS 1.2.0中使用ngAnimate替代jQuery.slideDown()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wildermuth.com/2013/9/18/Getting_Ready_for_AngularJS_1_2&quot;&gt;**为AngularJS 1.2做好准备&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;书籍-books&quot;&gt;书籍 Books&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920028055.do&quot;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packtpub.com/angularjs-to-build-dynamic-web-applications/book&quot;&gt;立刻快速开发 AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leanpub.com/recipes-with-angular-js&quot;&gt;AngularJS 菜单&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.manning.com/bford/&quot;&gt;AngularJS 在行动&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://henriquat.re/&quot;&gt;AngularJS For .Net 开发员&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packtpub.com/angularjs-web-application-development/book&quot;&gt;AngularJS 浏览器应用程序开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bleedingedgepress.com/our-books/developing-an-angularjs-edge/&quot;&gt;发现自己的 AngularJS 优势&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packtpub.com/angularjs-directives/book&quot;&gt;AngularJS Directives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ng-book.com/&quot;&gt;ng-book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://teropa.info/build-your-own-angular/&quot;&gt;打造你的AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packtpub.com/dependency-injection-angularjs/book&quot;&gt;AngularJS依赖注入&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packtpub.com/learning-web-development-with-bootstrap-and-angular/book&quot;&gt;通过Bootstrap和AngularJS学习Web开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packtpub.com/angularjs-design-patterns/book&quot;&gt;AngularJS 设计模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.packtpub.com/angularjs-web-application-development-blueprints/book&quot;&gt;AngularJS 网路应用开发蓝图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leanpub.com/Practical_AngularJS&quot;&gt;实用 AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;影片-videos&quot;&gt;影片 Videos&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.egghead.io/&quot;&gt;Egghead.io&lt;/a&gt; — 44 videos of about 4 minutes each — &lt;a href=&quot;https://github.com/msfrisbie/egghead-angularjs&quot;&gt;source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2013/04/12/video-tutorial-angularjs-fundamentals-in-60-ish-minutes.aspx&quot;&gt;视屏教程: 60分钟教你 AngularJS 基础入门&lt;/a&gt; — 1:10:50&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/user/angularjs&quot;&gt;AngularJS YouTube 主页&lt;/a&gt; — several videos, mostly presentations of 1h or more&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=8ILQOFAgaXE&quot;&gt;Angular JS 入门&lt;/a&gt; — 50:05&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=hqAyiqUs93c&quot;&gt;Angular JS 端对端测试&lt;/a&gt; — 52:59&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;Angular JS 安全性&lt;/a&gt; — 29:45&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=fSAgFxjFSqY&quot;&gt;Grunt 和 Angular JS 前端开发流程&lt;/a&gt; — 1:02:37&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=WuiHuZq_cg4&quot;&gt;AngularJS 教程&lt;/a&gt; — 12:19&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tekpub.com/products/angular&quot;&gt;AngularJS 秀 (Tekpub)&lt;/a&gt; — 8 videos (paid)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tutsplus.com/course/easier-js-apps-with-angular/&quot;&gt;用 AngularJS 快速开发 Javascript 应用程序(Tuts+)&lt;/a&gt; — 22 videos of about 5 minutes each, in 8 sections (paid)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/Courses/TableOfContents/angularjs-fundamentals&quot;&gt;AngularJS 基础入门 (Pluralsight)&lt;/a&gt; - 6 hours 15 minutes total (paid)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=W13qDdJDHp8&amp;amp;feature=youtu.be&quot;&gt;**AngularJS 1.2 和未来&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/playlist?list=PLfLN8Jd9-DVEQ0-PEnVeeUYyO0yg28mhN&quot;&gt;AngularJS 实例&lt;/a&gt; - Growing list of 5 minute or less videos&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=C7ZI7z7qnHU&quot;&gt;用 AngularJS 和 Firebase 开发实时程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XwSFg8nqBFA&quot;&gt;MongoDB 和 AngularJS， MEAN 堆&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=mVjpwia1YN4&quot;&gt;AngularJS, EmberJS 和 KnockoutJS 双向绑定的比较&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pluralsight.com/training/courses/TableOfContents?courseName=angular-best-practices&amp;amp;highlight=&quot;&gt;Angular最佳实践&lt;/a&gt; - 64 videos(paid)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCdaEMffiYgTf_E7uTMxM4og/videos&quot;&gt;Neosavvy的 Angular &amp;amp; Jasmine 视频系列&lt;/a&gt; - 16 videos of about 2-3 minutes each&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/channel/UCNhQ8pYS9U1EbwCx42NKaYQ&quot;&gt;AngularJS 视频集合&lt;/a&gt; — Collection of Videos from Various websites.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/user/ngconfvideos&quot;&gt;ng-conf YouTube 页面&lt;/a&gt; — YouTube channel with all the presentations given at the Angular Conference in January 2014.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=TRrL5j3MIvo&amp;amp;feature=youtu.be&quot;&gt;通过50个例子学习 Angular.js  (第1部分)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;在线课程-courses&quot;&gt;在线课程 Courses&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thinkster.io/&quot;&gt;Thinkster.io - 学习 AngularJS 更好的方法&lt;/a&gt; - 免費的線上 AngularJS 課程&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ng-tutorial.mgechev.com/&quot;&gt;AngularJS互动教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/angularjs-jumpstart/?sl=E0EYdlw9RBMALEwzBwZX&quot;&gt;和Dan Wahlin一起学习AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tutsplus.com/course/hands-on-angular/&quot;&gt;Tuts+: 开始使用 Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;Code School Shaping Up with Angular.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/154414-2.html&quot;&gt;Lynda Up and Running with AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1&quot;&gt;Codecademy AngularJs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;帮助-help&quot;&gt;帮助 Help&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/angularjs&quot;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/angular&quot;&gt;AngularJS 邮件列表（谷歌小组）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://webchat.freenode.net/?channels=angularjs&amp;amp;uio=d4&quot;&gt;Chatroom （基于浏览器的在线聊天系统）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://plus.google.com/u/0/communities/115368820700870330756&quot;&gt;AngularJS Google+的社区&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.reddit.com/r/angularjs&quot;&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一般主题-general-topics&quot;&gt;一般主题 General Topics&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cheatography.com/proloser/cheat-sheets/angularjs/&quot;&gt;AngularJS 速查表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://devgirl.org/2013/03/21/fun-with-angularjs/&quot;&gt;AngularJS 乐趣&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://onehungrymind.com/angularjs-philly-ete-slides/&quot;&gt;AngularJS Philly ETE 幻灯&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.tomaka17.com/2012/12/random-tricks-when-using-angularjs/&quot;&gt;随机技巧使用 AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.peterbe.com/plog/what-stumped-me-about-angularjs&quot;&gt;AngularJS 难倒我的是什么&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://oscarvillarreal.com/2013/05/07/5-reasons-to-use-angularjs-in-the-corporate-app-world/&quot;&gt;5个理由在企业应用程序世界中使用 AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ify.io/lazy-loading-in-angularjs/&quot;&gt;在 AngularJS 中实现延迟加载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html&quot;&gt;用更多 AngularJS 魔力来大力增压你的浏览器应用程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2472-HashKeyCopier-An-AngularJS-Utility-Class-For-Merging-Cached-And-Live-Data.htm&quot;&gt;HashKeyCopier - 一个 AngularJS 合并缓存和实时数据的实用工具类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2444-Exploring-Directives-scope-DOM-Rendering-And-Timing-In-AngularJS.htm&quot;&gt;在 AngularJS 中探索 Directive 指令，$scope，DOM 渲染和时序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2432-Applying-A-Cached-Response-To-An-AngularJS-Resource.htm&quot;&gt;在 AngularJS 资源上应用缓存的响应&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blogeek.com.ar/2013/06/03/angularytics-the-solution-to-tracking-page-views-and-events-in-a-spa-with-angularjs/&quot;&gt;Angularytics: 在 SPA 中用 AngularJS 来跟踪页面访问量和事件的解决方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blogeek.com.ar/2013/05/01/sharing-data-state-on-angularjs-alternatives-comparison-and-my-solution/&quot;&gt;在 AngularJS 上共享数据，状态和模型： 方案选择，比较和我的解决方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jefclaes.be/2013/06/angularjs-and-ie8-caching.html&quot;&gt;Angular.js 和 IE8 缓存&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2012/11/angularjs-and-seo.html&quot;&gt;AngularJS 和 SEO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sravi-kiran.blogspot.com/2013/03/TemplatesRoutingAndSharingDataBetweenViewsInAnAngularJsApplication.html&quot;&gt;模板，路由和共享数据视图之间的一个 AngularJS 的应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.thousandeyes.com/improving-end-user-experience-with-angularjs/&quot;&gt;用 AngularJS 改善最终用户体验&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://viralpatel.net/blogs/angularjs-controller-tutorial/&quot;&gt;AngularJS 控制器教程与实例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amitavroy.com/justread/content/articles/html5-local-storage-angular-js&quot;&gt;HTML5 本地存储与 Angular JS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gonzalo123.com/2013/07/08/dynamic-routes-with-angularjs-and-silex/&quot;&gt;动态路由和 AngularJS 以及 Silex&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/&quot;&gt;在你的 AngularJS 应用中建模数据和状态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phase2technology.com/blog/code-reuse-in-angularjs/&quot;&gt;AngularJS 代码重用 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2013/05/22/dynamically-loading-controllers-and-views-with-angularjs-and-requirejs.aspx&quot;&gt;在 AngularJS 和 RequireJS 中动态加载控制器和视图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://htmlcssjavascript.com/javascript/sorting-by-multiple-fields-with-different-sort-orders-using-the-angularjs-orderby-filter/&quot;&gt;用AngularJS的orderby筛选器对多个字段用不同顺序排序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/http-response-interceptors&quot;&gt;$http 响应拦截器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://trochette.github.io/Angular-Design-Patterns-Best-Practices/#/intro&quot;&gt;AngularJS: 先进的设计模式和最佳实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aboutcode.net/2013/07/27/json-date-parsing-angularjs.html&quot;&gt;AngularJS 的自动 JSON 数据解析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://odetocode.com/blogs/scott/archive/2013/05/01/angularjs-abstractions-modules.aspx&quot;&gt;AngularJS 抽象：模块&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2507-Mixing-Static-Content-With-ngSwitch-And-ngSwitchWhen-In-AngularJS.htm&quot;&gt;在 AngularJS 中用 ngSwitch 和 ngSwitchWhen 来混合静态内容&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pseudobry.com/building-large-apps-with-angularjs.html&quot;&gt;AngularJS 构建大型应用程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html&quot;&gt;**错误信息与​​微小MinErr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog-it.hypoport.de/2013/08/24/how-to-make-your-angularjs-app-work-in-ie-8/&quot;&gt;如何让你的AngularJS 应用程序在IE8工作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.small-improvements.com/2013/09/10/angularjs-performance-with-large-lists/&quot;&gt;AngularJS 性能优化的长列表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.innerhtml.com/responsive-website-using-angularjs.html&quot;&gt;AngularJS 响应网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/p/f8ae57e2cec3&quot;&gt;在 AngularJS 减少初始化时间&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/&quot;&gt;用 Yeoman, Grunt 和 Bower快速开发 Angular 程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wildermuth.com/2013/9/18/Getting_Ready_for_AngularJS_1_2&quot;&gt;**AngularJS 1.2 准备&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wintellect.com/blogs/jlikness/10-reasons-web-developers-should-learn-angularjs&quot;&gt;10个理由网页开发人员应该了解AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.mgechev.com/2013/10/01/angularjs-partials-lazy-prefetching-strategy-weighted-directed-graph/&quot;&gt;AngularJS partials 的懒惰预取&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://net.tutsplus.com/articles/resources-to-get-you-up-to-speed-in-angularjs/&quot;&gt;让你加快速度 AngularJS 开发的资源&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://solutionoptimist.com/2013/10/07/enhance-log-using-angularjs-decorators/&quot;&gt;使用装饰提升 AngularJS $log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm&quot;&gt;使用 AngularJS 和 Stacktrace.js 记录客户端错误&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://timothy.userapp.io/post/63412334209/form-autocomplete-and-remember-password-with-angularjs&quot;&gt;AngularJS表单自动完成，并记住密码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.scalyr.com/2013/10/31/angularjs-1200ms-to-35ms/&quot;&gt;优化AngularJS: 从1200ms到35ms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2551-Creating-A-RequireJS-Service-For-AngularJS-Applications.htm&quot;&gt;为AngularJS应用创建一个RequireJS服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2553-Loading-AngularJS-Components-After-Your-Application-Has-Been-Bootstrapped.htm&quot;&gt;在你的应用开始后加载AngularJS组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.getelementsbyidea.com/load-a-module-on-demand-with-angularjs/&quot;&gt;根据需求加载AngularJS模块&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newtriks.com/2013/11/29/environment-specific-configuration-in-angularjs-using-grunt/&quot;&gt;用Grunt来配置AngularJS环境&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2014/02/18/what-s-the-role-of-the-server-in-single-page-applications-spas.aspx&quot;&gt;服务器在单页应用(SPAs)中的作用?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.pusher.com/making-angular-js-realtime-with-pusher/&quot;&gt;通过Websockets将Angular.js实时化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.shinetech.com/2014/02/04/rich-object-models-and-angular-js/&quot;&gt;丰富的对象模型和Angular.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.shinetech.com/2014/02/28/rich-object-models-and-angular-identity-maps/&quot;&gt;丰富的对象模型和Angular: 一致性映射&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.webdeveasy.com/interceptors-in-angularjs-and-useful-examples/&quot;&gt;AngularJS中的障碍和实用例子&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.undefinednull.com/2014/02/17/resolve-in-angularjs-routes-explained-as-story/&quot;&gt;通过故事理解AngularJS路径&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.safaribooksonline.com/2014/04/08/refactoring-angularjs-get-hands-filthy/&quot;&gt;重构AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/opinionated-angularjs/2e6a067c73bc&quot;&gt;Angular模型和javascript的类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jonathancreamer.com/the-state-of-angularjs-controllers/&quot;&gt;angularjs控制器的状态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2014/05/how-to-use-ngmessages-in-angularjs.html&quot;&gt;怎么使用AngularJS的ngMessages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://toddmotto.com/digging-into-angulars-controller-as-syntax/&quot;&gt;深度挖掘Angular的控制器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://toddmotto.com/everything-about-custom-filters-in-angular-js/&quot;&gt;AngularJS自定义过滤器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://toddmotto.com/all-about-angulars-emit-broadcast-on-publish-subscribing/&quot;&gt;理解Angular的$scope和$rootScope事件系统中的$emit,$broadcast和$on &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.garbl.es/angularjs/preload/2014/06/07/frictionless-data-preloading-in-angularjs/&quot;&gt;AngularJS无阻碍数据预载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;介绍开始学习-angularjs&quot;&gt;介绍/开始学习 AngularJS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.adobe.com/devnet/html5/articles/getting-started-with-angularjs.html&quot;&gt;AngularJS 入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stephanebegaudeau.tumblr.com/post/48776908163/everything-you-need-to-understand-to-start-with&quot;&gt;你需要开始了解的 AngularJS 的一切&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codigovivo.com/2013/06/09/what-to-know-to-be-an-expert-in-angularjs/&quot;&gt;要成为 AngularJS 专家必备的知识&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/javascript-ajax/5-awesome-angularjs-features/&quot;&gt;5个很棒的 AngularJS 功能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.artlogic.com/2013/03/06/angularjs-for-jquery-developers/&quot;&gt;AngularJS for jQuery 开发者&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.webdesignerdepot.com/2013/04/an-introduction-to-angularjs/&quot;&gt;AngularJS 入门指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/javascript-ajax/building-a-web-app-from-scratch-in-angularjs/&quot;&gt;用 AngularJS 从头开始写应用程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://glennstovall.com/blog/2013/06/27/angularjs-an-overview/&quot;&gt;AngularJS: 概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/angularjs-tutorial-build-an-app-using-directives-and-data-binding/&quot;&gt;AngularJS教程 - 建立一个应用程序使用的指令和数据绑定&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.revillwebdesign.com/angularjs-tutorial/&quot;&gt;在30分钟内教会你 AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/&quot;&gt;用 Yeoman, Grunt 和 Bower 快速开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/10-reasons-use-angularjs/&quot;&gt;10个你需要开始用 AngularJS 的理由&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kidsil.net/2013/09/filtering-with-angularjs/&quot;&gt;AngularJS 筛选器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://toddmotto.com/ultimate-guide-to-learning-angular-js-in-one-day/&quot;&gt;一天学会 AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://learnangularjs.net/2013/10/24/7-ways-to-be-successful-with-angularjs/&quot;&gt;7 种成功学习Angular的方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scotch.io/tutorials/javascript/creating-a-single-page-todo-app-with-node-and-angular&quot;&gt; 用Node and Angular创建单页应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tutorialzine.com/2013/08/learn-angularjs-5-examples&quot;&gt; 通过 5 个实例学习Angular&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exratione.com/2013/12/considering-speed-and-slowness-in-angularjs/&quot;&gt;考虑的AngularJS的效率&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newtriks.com/2013/11/29/environment-specific-configuration-in-angularjs-using-grunt/&quot;&gt;Environment Specific Configuration in AngularJS Using Grunt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://solutionoptimist.com/2013/10/07/enhance-angularjs-logging-using-decorators/&quot;&gt;用装饰来提升Angular日志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/deontologician/pipr/blob/master/tut.org&quot;&gt;Picking Up Angular, build a twitter-like application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.loadimpact.com/2014/06/03/exception-handling-in-an-angularjs-web-application-tutorial/&quot;&gt;AngularJS网页应用的异常处理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pubnub.com/blog/angularjs-101-from-zero-to-angular-in-seconds/&quot;&gt;AngularJS 101: 从0开始学 Angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用及学习心得-lessons-learned&quot;&gt;使用及学习心得 Lessons Learned&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/&quot;&gt;经验教训：一年一个大AngularJS项目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://branchandbound.net/blog/web/2013/08/some-angularjs-pitfalls/&quot;&gt;一些AngularJS陷阱&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ruoyusun.com/2013/05/25/things-i-wish-i-were-told-about-angular-js.html&quot;&gt;我希望我事先被告知关于 Angular.js 的事实&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.objectpartners.com/2013/08/09/i-wish-i-knew-then-what-i-know-now-life-with-angularjs/&quot;&gt;我希望我当时就知道我现在知道的东西 — 我和AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/building-a-large-angular-application/&quot;&gt;如何建立一个大型Angular.js应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bytesforthought.com/angularjs-tips/&quot;&gt;对新手和全能好奇的开发人员的 AngularJS 提示和技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;分段式文章-multipart-articles&quot;&gt;分段式文章 Multipart Articles&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;开始使用elasticsearch和AngularJS: &lt;a href=&quot;http://www.fullscale.co/blog/2013/02/28/getting_started_with_elasticsearch_and_AngularJS_searching.html&quot;&gt;Part1 - 搜索&lt;/a&gt;, &lt;a href=&quot;http://www.fullscale.co/blog/2013/03/07/getting_started_with_elasticsearch_and-AngularJS_faceting.html&quot;&gt;Part 2: Faceting&lt;/a&gt;, &lt;a href=&quot;http://www.fullscale.co/blog/2013/03/20/getting_started_with_elasticsearch_and_AngularJS_d3.html&quot;&gt;Part 3: Visualization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;用AngularJS开发可维护网络应用: &lt;a href=&quot;http://blog.akquinet.de/2013/01/22/maintainable-rich-web-applications-with-angularjs/&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://blog.akquinet.de/2013/03/21/maintainable-rich-web-applications-with-angularjs-part-2/&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Google,Twitter和AngularJS: &lt;a href=&quot;http://dailyjs.com/2013/04/11/angularjs-1/&quot;&gt;1: Google, Twitter, and AngularJS&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/04/18/angularjs-2/&quot;&gt;2: Let’s Make a Feed Reader&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/04/25/angularjs-3/&quot;&gt;3: 生成源&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/05/09/angularjs-4/&quot;&gt;4: 管理源&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/05/16/angularjs-5/&quot;&gt;5: 测试&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/05/30/angularjs-6/&quot;&gt;6: 增加依赖&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/06/06/angularjs-7/&quot;&gt;7: 表格验证&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/06/13/angularjs-8/&quot;&gt;8: 迭代程序 &amp;amp; 过滤器&lt;/a&gt;, &lt;a href=&quot;http://dailyjs.com/2013/07/18/angularjs-9/&quot;&gt;9: 安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;用AnuglarJS打造 SignalR Stock Ticker: &lt;a href=&quot;http://sravi-kiran.blogspot.in/2013/05/ImplementingSignalRStockTickerUsingAngularJSPart1.html&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://sravi-kiran.blogspot.in/2013/05/ImplementingSignalRStockTickerUsingAngularJSPart2.html&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AngularJS 最佳实践: 我之前都做错了!: &lt;a href=&quot;http://blog.artlogic.com/2013/05/02/ive-been-doing-it-wrong-part-1-of-3/&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://blog.artlogic.com/2013/05/06/angularjs-best-practices-ive-been-doing-it-wrong-part-2-of-3/&quot;&gt;Part 2&lt;/a&gt;, &lt;a href=&quot;http://blog.artlogic.com/2013/05/08/angularjs-best-practices-ive-been-doing-it-wrong-part-3-of-3/&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AngularJS简介 &lt;a href=&quot;http://www.raweng.com/blog/2013/01/30/introduction-to-angularjs-part-1/&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://www.raweng.com/blog/2013/05/16/introduction-to-angularjs-part-2/&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;深入AngularJS : &lt;a href=&quot;http://suhairhassan.com/2013/06/07/angularjs-in-depth-part-1.html&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://suhairhassan.com/2013/07/25/angularjs-in-depth-part-2.html&quot;&gt;Part 2: 过滤器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ng-newsletter.com/posts/beginner2expert-how_to_start.html&quot;&gt;The 7 成为Angularjs大师&lt;/a&gt;, &lt;a href=&quot;http://www.ng-newsletter.com/posts/beginner2expert-scopes.html&quot;&gt;Part 2: Scopes&lt;/a&gt;, &lt;a href=&quot;http://www.ng-newsletter.com/posts/beginner2expert-data-binding.html&quot;&gt;Part 3: 双向绑定&lt;/a&gt;, &lt;a href=&quot;http://www.ng-newsletter.com/posts/beginner2expert-directives.html&quot;&gt;Part 4 and 5: Expressions and directives&lt;/a&gt;, &lt;a href=&quot;http://www.ng-newsletter.com/posts/beginner2expert-services.html&quot;&gt;Part 6: 服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AngularJS 概况: &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/04/05/getting-started-with-angularjs.aspx&quot;&gt;1:开始 AngularJS编程&lt;/a&gt;, &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/04/10/creating-an-angularjs-controller.aspx&quot;&gt;2:创造 一个 AngularJS 控制器&lt;/a&gt;, &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/04/15/the-angularjs-scope-is-not-the-mvc-model.aspx&quot;&gt;3: AngularJS $scope 不是MVC 模型&lt;/a&gt;, &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/05/10/using-repeating-elements-in-angularjs.aspx&quot;&gt;4:在 AngularJS中重复使用元素&lt;/a&gt;, &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/05/13/filtering-the-data-in-an-angularjs-ngrepeat-element.aspx&quot;&gt;5: 在一个 AngularJS ngRepeat 元素中过滤数据&lt;/a&gt;, &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/08/19/using-the-angularjs-formcontroller-to-control-form-submission.aspx&quot;&gt;6:用 #AngularJS 表格控制器来控制表格提交&lt;/a&gt;, &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/08/29/creating-an-angularjs-directive.aspx&quot;&gt;7:创造 #AngularJS Directive&lt;/a&gt;, &lt;a href=&quot;http://msmvps.com/blogs/theproblemsolver/archive/2013/09/05/using-the-dom-in-an-angularjs-application.aspx&quot;&gt;8:在一个 AngularJS 应用中使用DOM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;打造一个基于MongoDB, ExpressJS, AngularJS, 和 Node.js的Google日历订阅App   &lt;a href=&quot;http://www.jonathanbroquist.com/blog/2013/10/building-a-google-calendar-booking-app-with-mongodb-expressjs-angularjs-and-node-js-part-1/&quot;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;创造组建: &lt;a href=&quot;http://blog.thousandeyes.com/creating-extensible-widgets-part-1-jquery-to-angularjs/&quot;&gt;Part 1: 30秒将jQuery转成AngularJS&lt;/a&gt;, &lt;a href=&quot;http://blog.thousandeyes.com/creating-extensible-widgets-part-2-angularjs-directive-controllers/&quot;&gt;Part 2: AngularJS Directive 控制器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;范例应用程序-sample-apps&quot;&gt;范例应用程序 Sample Apps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/576246/A-Shopping-Cart-Application-Built-with-AngularJS&quot;&gt;建有AngularJS购物车应用程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cacodaemon.de/index.php?id=51&quot;&gt;用谷歌feed API 和 AngularJS建立一个 feed 阅读器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scopes--compile&quot;&gt;Scopes &amp;amp; Compile&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jimhoskins.com/2012/12/17/angularjs-and-apply.html&quot;&gt;AngularJS 和 scope.$apply&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs&quot;&gt;AngularJS 什么是范围原型/原型继承的细微之处？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://eburley.github.io/2013/01/31/angularjs-watch-pub-sub-best-practices.html&quot;&gt;angularjs.org watch, on pub sub, 和你.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.befundoo.com/blog/use-ng-bind-in-angularjs/&quot;&gt;AngularJS 中使用 Ng-bind&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2480-Unbinding-watch-Listeners-In-AngularJS.htm&quot;&gt;In AngularJS 中解除绑定 $watch() Listeners &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2457-Accessing-scope-On-The-DOM-Using-AngularJS.htm&quot;&gt;使用AngularJS 对DOMZ中的 $scope 进行访问&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2449-Directive-Link-observe-And-watch-Functions-Execute-Inside-An-AngularJS-Context.htm&quot;&gt;指令链路, $observe, 和 $watch 功能在AngularJS语境执行的内部&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codingsmackdown.tv/blog/2013/04/29/hailing-all-frequencies-communicating-in-angularjs-with-the-pubsub-design-pattern/&quot;&gt;Hailing All Frequencies – 在 AngularJS 用 Pub / Sub 设计模式进行内部沟通&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html&quot;&gt;AngularJS 嵌套作用域&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thenittygritty.co/angularjs-pitfalls-using-scopes&quot;&gt;AngularJS: 6个常见的使用作用域的陷阱&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Scoping AngularJS Directives: &lt;a href=&quot;http://spectaclelabs.io/blog/2013/06/22/scoping-angularjs-directives-part-1/&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;http://spectaclelabs.io/blog/2013/06/23/scoping-angularjs-directives-part-2/&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://angular-tips.com/blog/2013/08/watch-how-the-apply-runs-a-digest/&quot;&gt;$watch $apply 是怎么运行 $digest 的&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2013/08/angularjs-watch-digest-and-apply-oh-my.html&quot;&gt;AngularJS: $watch, $digest 和 $apply&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://angular-tips.com/blog/2013/08/removing-the-unneeded-watches/&quot;&gt;删除不需要的 Watches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2013/08/angular-compile-how-it-works-how-to-use.html&quot;&gt;Angular - $compile: 它是如何工作，如何使用它。&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ruoyusun.com/2013/08/24/a-glimpse-of-angularjs-scope-via-example.html&quot;&gt;通过实例来了解 Angular.js $scope&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://variadic.me/posts/2013-10-15-share-state-between-controllers-in-angularjs.html&quot;&gt;在AngularJS控制器之间共享状态&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;依賴注入-dependency-injection&quot;&gt;依賴注入 Dependency Injection&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alexrothenberg.com/2013/02/11/the-magic-behind-angularjs-dependency-injection.html&quot;&gt;AngularJS依赖注入背后的魔法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2013/05/23/angularjs-injection/&quot;&gt;AngularJS: 更多关于依赖注入&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://diegobarahona.com/javascript/angularjs/2013/06/13/angularjs-dependency-injection/&quot;&gt;Angularjs 依赖注入&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs/&quot;&gt;在 AngularJS 中配置依赖注入&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2527-Defining-Instantiatable-Classes-In-The-AngularJS-Dependency-Injection-Framework.htm&quot;&gt;在AngularJS依赖注入框架中定义实例化的类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;指令-directives&quot;&gt;指令 Directives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.adobe.com/devnet/html5/articles/angularjs-directives-and-the-computer-science-of-javascript.html&quot;&gt;AngularJS指令和JavaScript的计算机科学&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://henriquat.re/directives/introduction-to-directives/introductionToDirectives.html&quot;&gt;AngularJS指令 - 特定于域的扩展为HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.befundoo.com/university/tutorials/angularjs-directives-tutorial/&quot;&gt;AngularJS指令教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://panthersoftware.com/blog/2013/05/30/commentable-a-polymorphic-nested-comments-directive-for-angularjs/&quot;&gt;Commentable： AngularJS 的多态嵌套注释指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/the-ngform-directive-of-angularjs&quot;&gt;AngularJS的ngForm指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/run-a-directive-after-the-dom-has-finished-rendering&quot;&gt;执行指令后，DOM完成渲染&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/use-cases-of-angularjs-directives&quot;&gt;使用AngularJS指令的案例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2476-My-Approach-To-Building-AngularJS-Directives-That-Bind-To-JavaScript-Events.htm&quot;&gt;我的方法来构建绑定到JavaScript的事件的 AngularJS指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2471-Delegating-Nested-Directive-Behavior-To-Parent-Directive-In-AngularJS.htm&quot;&gt;AngularJS 委派嵌套指令行为转到父指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2447-Exploring-Directive-Controllers-Compiling-Linking-And-Priority-In-AngularJS.htm&quot;&gt;AngularJS 探索指令控制器，编译，链接和优先级&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2446-Using-Controllers-In-Directives-In-AngularJS.htm&quot;&gt;AngularJS 在指令中使用控制器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.grobmeier.de/angular-js-directives-with-json-arguments-08012013.html&quot;&gt;Angular.js 使用JSON参数的指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amitgharat.wordpress.com/2013/06/08/the-hitchhikers-guide-to-the-directive/&quot;&gt;指令的漫游指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codingsmackdown.tv/blog/2012/12/14/creating-a-simple-angularjs-directive/&quot;&gt;创建一个简单的AngularJS指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/607873/Extending-HTML-with-AngularJS-Directives&quot;&gt;扩展的HTML AngularJS指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sporto.github.io/blog/2013/06/24/nested-recursive-directives-in-angular/&quot;&gt;Angular 嵌套递归指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://icelab.com.au/articles/an-all-in-one-directive-controller-with-angularjs/&quot;&gt;AngularJS一个全功能于一身的指令控制器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://icelab.com.au/articles/levelling-up-with-angularjs-building-a-reusable-click-to-edit-directive/&quot;&gt;平了 AngularJS 的战场: 构建可重用点击编辑指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/&quot;&gt;AngularJS 覆盖标准的HTML标签的指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ngokevin.com/blog/angularslider/&quot;&gt;AngularJS 移动滑块指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2494-Using-Namespaces-For-One-Off-Directives-In-AngularJS.htm&quot;&gt;在AngularJS中使用命名空间一次性指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phase2technology.com/blog/angularjs-and-compile/&quot;&gt;AngularJS 和 $compile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ng-newsletter.com/posts/directives.html&quot;&gt;深度了解指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.grobmeier.de/angularjs-referencing-parent-scope-directive-23082013.html&quot;&gt;AngularJS: 引用父作用域的指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://angular-tips.com/blog/2013/08/tip-directives-with-the-same-name/&quot;&gt;提示：具有相同的名称的指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://odetocode.com/blogs/scott/archive/2013/09/11/moving-data-in-an-angularjs-directive.aspx&quot;&gt;将数据移入一个AngularJS指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2013/09/24/building-a-custom-angularjs-unique-value-directive.aspx&quot;&gt;构建自定义 AngularJS 指令的独特价值&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://toddmotto.com/creating-an-angularjs-directive-from-one-of-your-existing-plugins-scripts/&quot;&gt;从现有的插件/脚本之一创建 AngularJS 指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jasonmore.net/angular-js-directives-difference-controller-link/&quot;&gt;Angular.js指令 - 控制器和链路之间的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.befundoo.com/university/tutorials/angularjs-directives-tutorial/&quot;&gt;AngularJS指令教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://seanhess.github.io/2013/10/14/angularjs-directive-design.html&quot;&gt;AngularJS指令设计一点通&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://suhairhassan.com/2013/10/21/refactoring-to-angularjs-directive.html&quot;&gt;重构 AngularJS 指令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;服务供应商-servicesproviders&quot;&gt;服务/供应商 Services/Providers&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://iffycan.blogspot.com/2013/05/angular-service-or-factory.html&quot;&gt;Angular service 还是 factory?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jdriven.com/2013/03/how-to-create-singleton-angularjs-services-in-4-different-ways/&quot;&gt;如何在4种不同的方式创建 （Singleton） AngularJS服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sravi-kiran.blogspot.com/2013/03/MovingAjaxCallsToACustomServiceInAngularJS.html&quot;&gt;Angular JS 中移动AJAX调用到定制服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://angular-tips.com/blog/2013/08/consuming-services/&quot;&gt;消费服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://angular-tips.com/blog/2013/08/understanding-service-types/&quot;&gt;了解服务的类型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://djds4rce.wordpress.com/2013/08/13/understanding-angular-http-interceptors/&quot;&gt;理解 angular $http 拦截器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.xebia.com/2013/09/01/differences-between-providers-in-angularjs/&quot;&gt;在 AngularJS 中 provider 供应商之间的差异&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1gkDp8HJU5Hdgse6d0Ol0_nsi9MQulVTbRCkEThW0RRY/edit#&quot;&gt;Angular 的模块：工厂服务，服务，价值，噢，我的天啊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;路由-routing&quot;&gt;路由 Routing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/how-to-defer-route-definition-in-an-angularjs-web-app&quot;&gt;如何在AngularJS Web应用程序中推迟路由定义&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://txt.fliglio.com/2013/05/angularjs-state-management-with-ui-router/&quot;&gt;AngularJS UI路由器状态管理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2441-Nested-Views-Routing-And-Deep-Linking-With-AngularJS.htm&quot;&gt;AngularJS 嵌套视图，路由和深层链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://angular-ui.github.io/ui-router/sample/#/&quot;&gt;Angular UI 路由器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs/&quot;&gt;AngularJS 使用UI路由器基础&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2013/08/14/angularjs-routing-changes.aspx&quot;&gt;**AngularJS 路由变化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;承诺递延-promisesdeferred&quot;&gt;承诺/递延 Promises/Deferred&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blogeek.com.ar/2013/05/02/enhancing-angular-promises-returning-new-promise-of-field-or-method-called-from-original-promises-result/&quot;&gt;加强 Angular 承诺: 从当初的诺言的结果中返回字段或方法的新的承诺&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/angularjs-promise-or-dealing-with-asynchronous-requests-in-angularjs&quot;&gt;AngularJS 承诺，或在AngularJS处理异步请求&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://imownbey.github.io/skinny_controllers_for_yeezus.html&quot;&gt;在 AngularJS 中利用 Futures &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://markdalgleish.com/2013/06/using-promises-in-angularjs-views/&quot;&gt;在 AngularJS 视图中使用承诺&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://liamkaufman.com/blog/2013/09/09/using-angularjs-promises/&quot;&gt;使用 AngularJS 承诺&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/show-route-only-after-all-promises-are-resolved&quot;&gt;只有在所有的承诺都解决了再显示路由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;表单-forms&quot;&gt;表单 Forms&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/form-validation-the-angularjs-way&quot;&gt;AngularJS 表单验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/angularjs-directive-to-test-the-strength-of-a-password&quot;&gt;AngularJS指令来测试密码强度&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/angularjs-directive-to-check-that-passwords-match&quot;&gt;AngularJS 指令来检查密码是否匹配&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2452-Mixing-Static-And-Dynamic-Data-In-An-AngularJS-Select-Menu.htm&quot;&gt;在 AngularJS 选择菜单中混合静态和动态数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.grobmeier.de/angular-js-ng-select-and-ng-options-21112012.html&quot;&gt;Angular.js: ng-select 和 ng-options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.grobmeier.de/angular-js-autocomplete-and-enabling-a-form-with-watch-and-blur-19112012.html&quot;&gt;Angular.js: 用 $watch和 blur自动完成和启用表单&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kazimanzurrashid.com/posts/create-angularjs-directives-to-remove-duplicate-codes-in-form&quot;&gt;创建AngularJS指令在表格中来删除重复的代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2468-Forced-Repaints-In-Directive-Can-Cause-Accidental-Scrolling-In-AngularJS.htm&quot;&gt;In AngularJS 在指令中强制重绘会导致意外滚动&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://odetocode.com/blogs/scott/archive/2013/06/19/using-ngoptions-in-angularjs.aspx&quot;&gt;在 AngularJS 中使用 ngOptions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sravi-kiran.blogspot.com/2013/06/ShowingValidationMessagesInBulkWhileValidatingFormUsingAngularJS.html&quot;&gt;用 Angular JS 验证表单显示大量验证消息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/a-directive-to-manage-file-upload-in-an-angularjs-application&quot;&gt;在AngularJS应用程序管理文件上传的指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://odetocode.com/blogs/scott/archive/2013/06/25/radio-buttons-with-angularjs.aspx&quot;&gt;AngularJS 单选按钮&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shazwazza.com/post/Reference-the-current-form-controller-in-AngularJS&quot;&gt;AngularJS Referece 当前的 FormController&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shazwazza.com/post/Listening-for-validation-changes-in-AngularJS&quot;&gt;在AngularJS 中监听变化的验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2492-What-A-Select-watch-Teaches-Me-About-ngModel-And-AngularJS.htm&quot;&gt;A Select $watch() 教我关于 ngModel 和 AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.realcrowd.com/on-the-bleeding-edge-advanced-angularjs-form-validation/&quot;&gt;最前沿的：高级AngularJS表单验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aboutcode.net/2013/07/13/twitter-bootstrap-control-group-directive-for-angularjs.html&quot;&gt;Twitter Bootstrap control-group directive for AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.codebrag.com/post/57412530001/preventing-duplicated-requests-in-angularjs&quot;&gt;在AngularJS 中防止重复的请求&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jasoncust.com/2013/08/angularjs-missing-directives-native.html&quot;&gt;AngularJS 缺少的指令：原表单复位&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jasoncust.com/2013/08/angularjs-missing-directives-focus-blur_14.html&quot;&gt;**AngularJS 缺少的指令：焦点和模糊&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2013/03/angular-js-validating-form-elements-in.html&quot;&gt;Angular JS: 重复验证表单元素&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2012/12/angular-js-custom-validation-via.html&quot;&gt;Angular JS: 通过指令自定义验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2012/11/angular-js-form-validation.html&quot;&gt;Angular JS: 表单验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ng-newsletter.com/posts/validations.html&quot;&gt;深入学习表单验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jeremymarc.github.io/2013/08/20/ng-model-and-custom-form-validation/&quot;&gt;Ng-model 和自定义表单验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amitavroy.com/justread/content/articles/angular-js-ajax-dropdowns-date-picker-and-saving-data&quot;&gt;Angular JS Ajax 下拉菜单，日期选择器和保存数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mrbool.com/the-concepts-of-angularjs-forms/29117&quot;&gt;AngularJS 表单的概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;认证-authentication&quot;&gt;认证 Authentication&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app&quot;&gt;AngularJS Web 应用程序处理用户身份验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/&quot;&gt;Angular.js 单页应用程序验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arthur.gonigberg.com/2013/06/29/angularjs-role-based-auth/&quot;&gt;AngularJS – 快速的基于角色的认证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vickev.com/#!/article/authentication-in-single-page-applications-node-js-passportjs-angularjs&quot;&gt;单页应用验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collections--ngrepeat-stuff&quot;&gt;Collections (&amp;amp; ngRepeat Stuff)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2485-Working-With-Inherited-Collections-In-AngularJS.htm&quot;&gt;使用 AngularJS 继承来的Collection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2451-Adding-An-ngRepeat-List-Delimiter-In-AngularJS.htm&quot;&gt;在 AngularJS 中 添加 ngRepeat 列表分隔符&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2456-Grouping-Nested-ngRepeat-Lists-In-AngularJS.htm&quot;&gt;在 AngularJS 中分组嵌套 ngRepeat 列表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2450-Using-ngController-With-ngRepeat-In-AngularJS.htm&quot;&gt;在 AngularJS 中使用 ngController 和 ngRepeat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2443-Rendering-DOM-Elements-With-ngRepeat-In-AngularJS.htm&quot;&gt;在 AngularJS 中通过 ngRepeat 渲染DOM元素&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;原始码组织架构-code-organization&quot;&gt;原始码组织架构 Code Organization&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://briantford.com/blog/huuuuuge-angular-apps.html&quot;&gt;用 AngularJS 开发超大的应用程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript&quot;&gt;大 AngularJS 和 JavaScript 的应用的代码组织&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blogeek.com.ar/2013/05/18/proposed-angulars-project-structure/&quot;&gt;Angular 应用程序的网页结构构想&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blogeek.com.ar/2013/03/23/the-right-way-of-coding-angularjs-how-to-organize-a-regular-webapp/&quot;&gt;如何组织一个普通 Web 应用程序： 编码 AngularJS 的正确方法。基本示例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codingsmackdown.tv/blog/2013/04/19/angularjs-modules-for-great-justice/&quot;&gt;AngularJS 模块&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Nikku/requirejs-angular-define&quot;&gt;ngDefine: AngularJS &amp;amp; RequireJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clintberry.com/2013/modular-angularjs-application-design/&quot;&gt;模块化AngularJS应用设计&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://solutionoptimist.com/2013/09/30/requirejs-angularjs-dependency-injection/&quot;&gt;在 AngularJS DI 中使用 RequireJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;测试-testing&quot;&gt;测试 Testing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-testacular.html&quot;&gt;用 AngularJS 和 Testacular 进行全频谱测试&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codingsmackdown.tv/blog/2012/12/28/mocking-promises-in-unit-tests/&quot;&gt;在单元测试中 Mocking 承诺&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newtriks.com/2013/04/26/how-to-test-an-angularjs-directive/&quot;&gt;如何测试AngularJS指令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sravi-kiran.blogspot.com/2013/04/UnitTestingAngularJsControllerUsingJasmine.html&quot;&gt;用 Jasmine 单元测试 AngularJS 控制器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sravi-kiran.blogspot.com/2013/06/UnitTestingAngularJsControllerUsingQUnitAndSinon.html&quot;&gt;使用 QUnit 和 Sinon 单元测试 AngularJS 控制器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.portlandwebworks.com/blog/testing-angularjs-directives-handling-external-templates&quot;&gt;测试 AngularJS Directive： 处理外部模板&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alexrothenberg.com/2013/08/06/how-to-unit-test-an-angular-app.html&quot;&gt;如何进行 Angular 应用程序的单元测试&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2013/06/angular-js-unit-testing-directives.html&quot;&gt;单元测试 - 指令 Directives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2013/06/angular-js-unit-testing-services.html&quot;&gt;单元测试 - 服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html&quot;&gt;单元测试 - 控制器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flippinawesome.org/2013/09/09/mocking-server-dependencies-in-javascript-and-angularjs/&quot;&gt;在JavaScript 和 AngularJS 中 mock 服务器依赖性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2013/09/advanced-testing-and-debugging-in-angularjs.html&quot;&gt;AngularJS 先进的测试和调试的&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://andyshora.com/unit-testing-best-practices-angularjs.html&quot;&gt;AngularJS 单元测试的最佳实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.mulesoft.org/angularjs-using-decorators-for-unit-testing/&quot;&gt;在 AngularJS 中装饰你的测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;restful-stuff&quot;&gt;RESTful Stuff&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2433-Using-RESTful-Controllers-In-An-AngularJS-Resource.htm&quot;&gt;在 AngularJS 资源中使用 REST 风格的控制器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blogeek.com.ar/2013/04/09/restangular-new-angular-framework-to-handle-restful-resources-properly-and-easily/&quot;&gt;Restangular: 新AngularJS框架来适当地，轻松地处理 REST API REST 风格的资源&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.blogeek.com.ar/2013/04/26/new-features-on-restangular-the-ultimate-rest-api-client-for-angularjs/&quot;&gt;Restangular 新功能: 针对 Angular的终极 REST API 客户端&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2013/08/16/using-an-angularjs-factory-to-interact-with-a-restful-service.aspx&quot;&gt;使用 AngularJS 厂服务与 RESTful 服务实现互动&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/authentication-to-a-restful-web-service-in-an-angularjs-web-app&quot;&gt;在 AngularJS web应用程序中实现一个 REST 风格的 Web 服务身份验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;本地化-localization&quot;&gt;本地化 Localization&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://codingsmackdown.tv/blog/2013/04/23/localizing-your-angularjs-apps-update/&quot;&gt;Localizing Your AngularJS Apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/internazionalization-i18n-with-angularjs&quot;&gt;Internazionalization (i18n) with AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coderwall.com/p/uyrtpq&quot;&gt;AngularJS And i18n&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;界面-ui-stuff&quot;&gt;界面 UI Stuff&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://angular-ui.github.io/&quot;&gt;Angular UI 套件（包括一些子项目）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2013/04/animation-in-angularjs.html&quot;&gt;AngularJS 动画&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2013/05/enhanced-animations-in-angularjs.html&quot;&gt;在AngularJS增强的动画功能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.befundoo.com/blog/angularjs-popup-dialog/&quot;&gt;可重复使用的 AngularJS 弹出的对话框中服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2440-Creating-A-Custom-Show-Hide-Directive-In-AngularJS.htm&quot;&gt;在 AngularJS 中创建自定义显示/隐藏 Directive &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.grobmeier.de/bootstrap-tabs-with-angular-js-25112012.html&quot;&gt;在 Angular.js 中实现 Bootstrap Tabs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codingsmackdown.tv/blog/2013/01/02/using-response-interceptors-to-show-and-hide-a-loading-widget/&quot;&gt;使用拦截器的响应显示和隐藏一个装载小工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hueypetersen.com/posts/2013/06/24/typeahead-with-angular/&quot;&gt;用 AngularJS 建立一个 Typeahead Directive &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fundoo-solutions.github.io/angularjs-modal-service/&quot;&gt;AngularJS Modal 服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2497-Cross-Fading-Images-With-AngularJS.htm&quot;&gt;AngularJS 中实现交叉衰落图像&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2013/06/07/angular-svg/&quot;&gt;AngularJS 和 SVG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jjperezaguinaga.wordpress.com/2013/07/16/angularjs-scroll-animations/&quot;&gt;AngularJS: 滚动动画&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flippinawesome.org/2013/08/05/animating-with-angularjs/&quot;&gt;AngularJS 动画&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://buildinternet.com/2013/08/drag-and-drop-file-upload-with-angularjs/&quot;&gt;用 AngularJS 实现拖放文件上传&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html&quot;&gt;**在 AngularJS 1.2 中重新掌握动画&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benlesh.com/2013/02/angular-js-scrolling-to-element-by-id.html&quot;&gt;Angular JS - 通过ID滚动到某个元素&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblogs.asp.net/dwahlin/archive/2013/08/19/building-an-angularjs-dialog-service.aspx&quot;&gt;构建 AngularJS 对话服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.johnpapa.net/preparing-for-animations-in-angular-1-2-0/&quot;&gt;**在 Angular 1.2.0 中准备使用动画&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exratione.com/2013/09/replacing-jqueryslidedown-with-nganimate-in-angularjs-120/&quot;&gt;**在 AngularJS 1.2.0 中用 ngAnimate 替换 jQuery.slideDown()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://veamospues.wordpress.com/2013/10/13/angularjs-blurred-image-directive/&quot;&gt;AngularJS: 模糊图像 directive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://julienrenaux.fr/2013/10/27/create-a-load-more-widget-using-angularjs-ajax-and-bootstrap-3/&quot;&gt;使用AngularJS，Ajax和 Bootstrap 3 来建立一个“加载更多”小工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;整合其他语言框架-integration-with-other-languagesframeworks&quot;&gt;整合其他语言/框架 Integration With Other Languages/Frameworks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://notebookheavy.com/2013/05/22/angularjs-and-typescript/&quot;&gt;AngularJS 和 TypeScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://spiiice.net/using-angularjs-and-d3-to-create-a-wordcloud-directive/&quot;&gt;用 AngularJS 和 D3 来建立一个 WordCloud Directive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2448-Using-jQuery-Event-Delegation-In-AngularJS.htm&quot;&gt;在 AngularJS 中用 jQuery Event Delegation &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sravi-kiran.blogspot.in/2013/05/HookingUpAspNetSignalRWithAngularJS.html&quot;&gt;Hooking up ASP.NET SignalR with Angular JS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app&quot;&gt;在你的 AngularJS 应用程序进行 Facebook 的身份验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://newtriks.com/2013/06/11/automating-angularjs-with-yeoman-grunt-and-bower/&quot;&gt;用 Yeoman, Grunt &amp;amp; Bower 来全面自动化你的 Angular 开发过程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://briantford.com/blog/angular-bower.html&quot;&gt;用 Bower 编写可重用的 AngularJS 组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wbyoko.co/angularjs/angularjs-google-maps-components.html&quot;&gt;用 ngularJS 开发谷歌地图的组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mircozeiss.com/sync-multiple-angularjs-apps-without-server-via-pouchdb/&quot;&gt;无需服务器来通过 PouchDB 来同步多个 AngularJS 应用程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/&quot;&gt;用 AngularJS 和 PouchDB构建离线应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4&quot;&gt;如何AngularJS和Rails集成4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;后端代管-hosted-backends&quot;&gt;后端代管 Hosted Backends&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://brandid.github.io/parse-angular-demo/#/features&quot;&gt;Parse.com boilerplate 建设大型，复杂 AngularJS 应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/firebase/angularFire&quot;&gt;用 Firebase用于 Angular 应用程序的实时数据库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.backlift.com/entry/angular-tut1&quot;&gt;用 Backlift开发针对 Angular 的 CRUD 后端 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/&quot;&gt;用 AngularJS 和 PouchDB 构建离线应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dreamfactory.com/angularjs-example&quot;&gt;用 DreamFactory 开发 针对 Angular 的 CRUD 后端&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.firebase.com/blog/2013-10-04-firebase-angular-data-binding.html&quot;&gt;Firebase 和 Angular 三个双向数据绑定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;移动装置-mobile&quot;&gt;移动装置 Mobile&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://devgirl.org/2013/06/10/quick-start-guide-phonegap-and-angularjs/&quot;&gt;PhoneGap+AngularJS 快速入门指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://briantford.com/blog/angular-phonegap.html&quot;&gt;用 AngularJS 开发 PhoneGap 引用程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.pro/tutorial/1357/phonegap-and-angularjs-in-app-browser&quot;&gt;PhoneGap 和 AngularJS: In App Browser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.pro/tutorial/1349/phonegap-and-angularjs-notification-service&quot;&gt;PhoneGap 和 AngularJS: Notification Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://abou-kone.com/2013/07/17/developing-a-mobile-app-with-phonegap-angularjs-and-expressjs-part-i/&quot;&gt;用 Phonegap, AngularJS 和 ExpressJS 开发移动程序第一部分&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;编译器-text-editor-bundleside-stuff&quot;&gt;编译器 Text editor bundles/IDE Stuff&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/angular-ui/AngularJS-sublime-package&quot;&gt;Sublime text 2 包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/matthewsimo/angular-vim-snippets&quot;&gt;VIM UltiSnip &amp;amp; Snipmate AngularJS 代码片段 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/&quot;&gt;在 WebStorm 7 中运行 Javscript 测试&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.microsoft.com/visualstudio&quot;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;开发工具&quot;&gt;开发工具&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;AngularJS Batarang Chrome 浏览器扩展&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://spascaffold.azurewebsites.net/AngularJSScaffold&quot;&gt;从JSON或者 restful API生成 JavaScript 和 HTML，使用 AngularJS 和 JQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//html/2016/06/15/angularjs-guide.html</link>
        <guid isPermaLink="true">http://localhost:4000//html/2016/06/15/angularjs-guide.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>Mac下给SD卡安装Raspbian系统并配置WiFi</title>
        <description>&lt;h2 id=&quot;1安装&quot;&gt;1、安装&lt;/h2&gt;

&lt;h3 id=&quot;系统下载地址&quot;&gt;系统下载地址&lt;/h3&gt;

&lt;p&gt;插入SD卡，使用 df 查看当前已经挂载的卷&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ df
Filesystem    512-blocks      Used Available Capacity  iused   ifree %iused  Mounted on
/dev/disk1     233269248 218788512  13968736    94% 27412562 1746092   94%   /
devfs                374       374         0   100%      648       0  100%   /dev
map -hosts             0         0         0   100%        0       0  100%   /net
map auto_home          0         0         0   100%        0       0  100%   /home
/dev/disk2s1    31100416      4992  31095424     1%        0       0  100%   /Volumes/Pi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为已经命名了SD卡为 Pi ，所以SD卡的分区对应的设备文件为：/dev/disk2s1&lt;/p&gt;

&lt;p&gt;使用diskutil unmount卸载&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil unmount /dev/disk2s1
Volume Pi on disk2s1 unmounted
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;diskutil list 确认设备 我买的是16G的卡&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil list
/dev/disk2
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *15.9 GB    disk2
   1:                 DOS_FAT_32 Pi                      15.9 GB    disk2s1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用dd命令将系统镜像写入&lt;/p&gt;

&lt;p&gt;PS /dev/disk2s1是分区，/dev/disk2是块设备，/dev/rdisk2是原始字符设备&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dd bs=4m if=pi.img of=/dev/rdisk2
781+1 records in
781+1 records out
3276800000 bytes transferred in 194.134151 secs (16879050 bytes/sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，SD卡上已经刷入了 Raspbian 系统&lt;/p&gt;

&lt;p&gt;再用diskutil unmountDisk卸载设备&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil unmountDisk /dev/disk2
Unmount of all volumes on disk2 was successful
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2配置wifi&quot;&gt;2、配置WiFi&lt;/h2&gt;

&lt;p&gt;树莓派自带WiFi，在启动系统之后，我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ip a&lt;/code&gt;命令看到wlan0网卡，下面是修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/network/interfaces.d&lt;/code&gt;配置文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# interfaces(5) file used by ifup(8) and ifdown(8)

# Please note that this file is written to be used with dhcpcd
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'

# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto lo
iface lo inet loopback

iface eth0 inet manual

allow-hotplug wlan0

iface wlan0 inet dhcp
wpa-ssid WiFi-ssid
wpa-psk WiFi-password
iface default inet dhcp

allow-hotplug wlan1
iface wlan1 inet manual
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也可以配成静态网络&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# interfaces(5) file used by ifup(8) and ifdown(8)

# Please note that this file is written to be used with dhcpcd
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'

# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto lo
iface lo inet loopback

iface eth0 inet manual

allow-hotplug wlan0

iface wlan0 inet static
wpa-ssid WiFi-ssid        # 需要连接的WiFi名
wpa-psk WiFi-password     # WiFi密码
address 192.168.1.110     # 设定的静态IP地址
netmask 255.255.255.0     # 网络掩码
gateway 192.168.1.1      # 网关
network 192.168.1.1      # 网络地址
iface default inet dhcp

allow-hotplug wlan1
iface wlan1 inet manual
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重启&lt;code class=&quot;highlighter-rouge&quot;&gt;init 6&lt;/code&gt;即可（需要root权限）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi:~ $ ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000
    link/ether b8:27:eb:ca:9c:86 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::d72f:7f67:bf11:ec0f/64 scope link tentative
       valid_lft forever preferred_lft forever
3: wlan0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether b8:27:eb:9f:c9:d3 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.14/24 brd 192.168.1.255 scope global wlan0
       valid_lft forever preferred_lft forever
    inet6 fe80::c52e:80ca:79e2:ebb5/64 scope link
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2016/06/09/install-raspbian-on-mac.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2016/06/09/install-raspbian-on-mac.html</guid>
        
        <category>Raspbian</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>用jPages为Jekyll增加分页</title>
        <description>&lt;p&gt;Jekyll自带的分页功能总不是那么全，在&lt;a href=&quot;http://jekyll.bootcss.com/docs/pagination/&quot;&gt;官方文档&lt;/a&gt;中有讲到Jekyll自带分页的使用方法，为了达到更好的分页效果，比如在不同类别的文章下进行分页，就要用别的方法来实现了。&lt;/p&gt;

&lt;p&gt;首先，在网上我也找到了很多Jekyll的第三方插件，功能很强大，不过github不允许使用，无奈之下只好另寻他法。因为平时做网站开发想到的都是后端分页的方法，那么在github这个不用考虑性能的网站上，我们为什么不能尝试使用前端分页的方法呢？而且我们的文章也不是非常多，一次得到所有数据再分页未尝不可。就这样，我在网上找到了一些基于jQuery的前端分页插件，使用感觉最好的就是&lt;a href=&quot;http://luis-almeida.github.io/jPages/&quot;&gt;jPages&lt;/a&gt;了。&lt;/p&gt;

&lt;p&gt;jPages的文档很详细，每种分页的方法从html、JavaScript到CSS都有源代码，并有展示，这里我讲一下我是怎么用到jekyll中，我使用的是items per page这个example：&lt;/p&gt;

&lt;h3 id=&quot;step-1&quot;&gt;Step 1&lt;/h3&gt;

&lt;p&gt;首先需要把jPages.js和js.js引入页面，放在jQuery.js的下面&lt;/p&gt;

&lt;h3 id=&quot;step-2&quot;&gt;Step 2&lt;/h3&gt;

&lt;p&gt;然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/head.html&lt;/code&gt;中加入对应的js：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
          &lt;span class=&quot;cm&quot;&gt;/* initiate the plugin */&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div.pag-holder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;containerID&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pag-itemContainer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;perPage&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* num of items per page */&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;startPage&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;startRange&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;midRange&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;endRange&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个js的作用是对&lt;code class=&quot;highlighter-rouge&quot;&gt;id=&quot;pag-holder&quot;&lt;/code&gt;的div进行渲染，主要是实现对应的页数和样式，对应的html在&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/pagination.html&lt;/code&gt;中，注意js中的&lt;code class=&quot;highlighter-rouge&quot;&gt;containerID&lt;/code&gt;，它会找页面中&lt;code class=&quot;highlighter-rouge&quot;&gt;id=pag-itemContainer&lt;/code&gt;的id，对其进行分页，观察得到其实他就是将所有的item包装成&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt;，然后对每个item进行分页，然后下面就好做了，下面是&lt;code class=&quot;highlighter-rouge&quot;&gt;python.html&lt;/code&gt;中的部分代码：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pag-itemContainer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list-style:none;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {\% assign counter = 0 \%}
		{\% for post in site.categories['Python'] \%}
		{\% assign counter = counter | plus: 1 \%}
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
		...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ps：因为jekyll会对代码中语法检查，我使用”\“进行转义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt;会有一个圆点在每个item之前，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;style=&quot;list-style:none;&quot;&lt;/code&gt;即可去除，这里我用了一个计数器，是为了在&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/pagination.html&lt;/code&gt;中判断文章是否达到分页要求，因为我设置的是&lt;code class=&quot;highlighter-rouge&quot;&gt;perPage:5&lt;/code&gt;，所以我有一个大于5的判断。&lt;/p&gt;

&lt;h3 id=&quot;step-3&quot;&gt;Step 3&lt;/h3&gt;

&lt;p&gt;最后一步就是对分页的样式重新定义，因为jPages自带的样式很不好看，我使用的是bootstrap，这里需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;jPages.js&lt;/code&gt;中进行修改，具体可以在我&lt;a href=&quot;https://github.com/Jack614/jalpc_jekyll_theme/blob/gh-pages/static/js/jPages.js&quot;&gt;项目&lt;/a&gt;中的代码查看，有注释的部分是jPages原来的代码。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//html/2016/06/04/jekyll-pagination-with-jpages.html</link>
        <guid isPermaLink="true">http://localhost:4000//html/2016/06/04/jekyll-pagination-with-jpages.html</guid>
        
        <category>pagination</category>
        
        <category>jekyll</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>神奇的Python</title>
        <description>&lt;p&gt;今天在Python中发现一个神奇的功能，在Python shell中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;import this&lt;/code&gt;，有如下展示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;原来这就是Python之禅，哈哈&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/life/2016/06/02/zen-of-python.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/life/2016/06/02/zen-of-python.html</guid>
        
        <category>Python</category>
        
        
        <category>Python</category>
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>使用iTerm2上传下载文件</title>
        <description>&lt;p&gt;在Mac上使用iTerm2确实让Linux终端操作方便的很多，加上&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt;这个强大shell的利器，敲命令就像滚键盘一样。&lt;/p&gt;

&lt;p&gt;但是iTerm2没有对文件上传下载进行支持，这个是要比secureCRT弱的地方，不过我们总有办法能够解决，因为iTerm2足够强大，下面是利用rz/sz工具来实现文件上传下载的方法：&lt;/p&gt;

&lt;p&gt;在Mac电脑上安装rz/sz：&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install lrzsz&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# iterm2-zmodem&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# copyright (c) 2013 by Harald Lapp &amp;lt;harald@octris.org&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# AppleScript portion from:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# licensed under cc-wiki with attribution required &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This script can be found at:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://github.com/aurora/iterm2-zmodem&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is a re-implementation of the shell scripts &quot;iterm2-recv-zmodem.sh&quot; and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &quot;iterm2-send-zmodem.sh&quot; found at https://github.com/mmastrac/iterm2-zmodem&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; sz|rz&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# send Z-Modem cancel sequence&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;cancel &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;x18&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;x18&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;x18&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;x18&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;x18
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# send notification using growlnotify&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;notify &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -v growlnotify &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;growlnotify -a /Applications/iTerm.app -n &lt;span class=&quot;s2&quot;&gt;&quot;iTerm&quot;&lt;/span&gt; -m &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -t &lt;span class=&quot;s2&quot;&gt;&quot;File transfer&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;# &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | tr &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#setup&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LRZSZ_PATH&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LRZSZ_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LRZSZ_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LRZSZ_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -p getconf PATH&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:/usr/local/bin&lt;span class=&quot;nv&quot;&gt;$LRZSZ_PATH&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ZCMD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -v &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -v l&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;l&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# main&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ZCMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;cancel
    &lt;span class=&quot;nb&quot;&gt;echo

    &lt;/span&gt;notify &lt;span class=&quot;s2&quot;&gt;&quot;Unable to find Z-Modem tools&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# receive a file&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;DST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
        osascript &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -e &lt;span class=&quot;s2&quot;&gt;&quot;tell application &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iTerm&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to activate&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -e &lt;span class=&quot;s2&quot;&gt;&quot;tell application &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iTerm&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to set thefile to choose folder with prompt &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Choose a folder to place received files in&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -e &lt;span class=&quot;s2&quot;&gt;&quot;do shell script (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;(quoted form of POSIX path of thefile as Unicode text)&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;cancel
        &lt;span class=&quot;nb&quot;&gt;echo 
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	
    notify &lt;span class=&quot;s2&quot;&gt;&quot;Z-Modem started receiving file&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$ZCMD&lt;/span&gt; -e -y
    &lt;span class=&quot;nb&quot;&gt;echo 

    &lt;/span&gt;notify &lt;span class=&quot;s2&quot;&gt;&quot;Z-Modem finished receiving file&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# send a file&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;SRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
        osascript &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -e &lt;span class=&quot;s2&quot;&gt;&quot;tell application &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iTerm&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to activate&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -e &lt;span class=&quot;s2&quot;&gt;&quot;tell application &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iTerm&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to set thefile to choose file with prompt &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Choose a file to send&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -e &lt;span class=&quot;s2&quot;&gt;&quot;do shell script (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;(quoted form of POSIX path of thefile as Unicode text)&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SRC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;cancel
        &lt;span class=&quot;nb&quot;&gt;echo 
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

    &lt;/span&gt;notify &lt;span class=&quot;s2&quot;&gt;&quot;Z-Modem started sending
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SRC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$ZCMD&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SRC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo 

    &lt;/span&gt;notify &lt;span class=&quot;s2&quot;&gt;&quot;Z-Modem finished sending
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SRC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先将这个脚本写到/usr/local/bin/iterm2-zmodem文件下，给它可执行权限&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x /usr/local/bin/iterm2/zmodem&lt;/code&gt;，这个脚本是在Linux终端使用rz/sz时调用的，需要由iTerm2触发，在iTerm2-&amp;gt;Preferences…-&amp;gt;Profiles-&amp;gt;Advanced下的Triggers，点击Edit进入编辑。加入如下配置即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Regular expression: \*\*B0100
Action:             Run Coprocess
Parameters:         /usr/local/bin/iterm2-zmodem sz

Regular expression: \*\*B00000000000000
Action:             Run Coprocess
Parameters:         /usr/local/bin/iterm2-zmodem rz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Github链接：&lt;a href=&quot;https://github.com/Jack614/iterm2-zmodem&quot;&gt;https://github.com/Jack614/iterm2-zmodem&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//mac/2016/05/29/Z-Modem-integration-for-iTerm2.html</link>
        <guid isPermaLink="true">http://localhost:4000//mac/2016/05/29/Z-Modem-integration-for-iTerm2.html</guid>
        
        <category>Mac</category>
        
        
        <category>Mac</category>
        
      </item>
    
      <item>
        <title>From mysql to redis with python</title>
        <description>&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## SQL to Redis&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# import Redis and MySQL drivers&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;redis&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MySQLdb&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;dataProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Mysql server data&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MYSQL_IP_ADDRESS_SERVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MYSQL_USER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'root'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MYSQL_PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'my_strong_password'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MYSQL_DATABASE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'database_name'&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Redis server data&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;REDIS_SERVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# function to get data from mysql and to transfer it to redis&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sql_to_redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrictRedis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REDIS_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Connected to Redis successfully!&quot;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQLdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_IP_ADDRESS_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MYSQL_DATABASE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Connected to MySQL successfully!&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SELECT * FROM records WHERE location_id = 9 LIMIT 100'&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# select = 'SELECT * FROM records WHERE location_id = 9'&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;# Clean redis before run again&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# This is for test purpose&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all_records&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;# Put all data from MySQL to Redis&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all_records&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;# Close connection to DB and Cursor&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_data_from_redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;r2_redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrictRedis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REDIS_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2_redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all_records&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Size of list:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;words_to_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word_list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;top_ten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words_to_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Top 10 Most popular words:&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top_ten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 04 May 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/database/2016/05/04/python-mysql-redis.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/database/2016/05/04/python-mysql-redis.html</guid>
        
        <category>Python</category>
        
        <category>MySQL</category>
        
        <category>Redis</category>
        
        
        <category>Python</category>
        
        <category>Database</category>
        
      </item>
    
      <item>
        <title>PEP8 Python 编码规范整理</title>
        <description>&lt;h4 id=&quot;一代码编排&quot;&gt;一、代码编排&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;缩进。4个空格的缩进（编辑器都可以完成此功能），不使用Tap，更不能混合使用Tap和空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每行最大长度79，换行可以使用反斜杠，最好使用圆括号。换行点要在操作符的后边敲回车。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;二文档编排&quot;&gt;二、文档编排&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;模块内容的顺序：模块说明和docstring—import—globals&amp;amp;constants—其他定义。其中import部分，又按标准、三方和自己编写顺序依次排放，之间空一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不要在一句import中多个库，比如import os, sys不推荐。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果采用from XX import XX引用库，可以省略‘module.’，都是可能出现命名冲突，这时就要采用import XX。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;三空格的使用&quot;&gt;三、空格的使用&lt;/h4&gt;

&lt;h6 id=&quot;总体原则避免不必要的空格&quot;&gt;总体原则，避免不必要的空格。&lt;/h6&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;各种右括号前不要加空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;逗号、冒号、分号前不要加空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数的左括号前不要加空格。如Func(1)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;序列的左括号前不要加空格。如list[2]。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;操作符左右各加一个空格，不要为了对齐增加空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数默认参数使用的赋值符左右省略空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不要将多句语句写在同一行，尽管使用‘；’允许。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if/for/while语句中，即使执行语句只有一句，也必须另起一行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;四注释&quot;&gt;四、注释&lt;/h4&gt;

&lt;h6 id=&quot;总体原则错误的注释不如没有注释所以当一段代码发生变化时第一件事就是要修改注释&quot;&gt;总体原则，错误的注释不如没有注释。所以当一段代码发生变化时，第一件事就是要修改注释！&lt;/h6&gt;

&lt;h6 id=&quot;注释必须使用英文最好是完整的句子首字母大写句后要有结束符结束符后跟两个空格开始下一句如果是短语可以省略结束符&quot;&gt;注释必须使用英文，最好是完整的句子，首字母大写，句后要有结束符，结束符后跟两个空格，开始下一句。如果是短语，可以省略结束符。&lt;/h6&gt;

&lt;ol&gt;
  &lt;li&gt;块注释，在一段代码前增加的注释。在‘#’后加一空格。段落之间以只有‘#’的行间隔。比如：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Description : Module config.
# 
# Input : None
#
# Output : None
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;行注释，在一句代码后加注释。比如：x = x + 1 # Increment x
但是这种方式尽量少使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免无谓的注释。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;五文档描述&quot;&gt;五、文档描述&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;为所有的共有模块、函数、类、方法写docstrings；非共有的没有必要，但是可以写注释（在def的下一行）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果docstring要换行，参考如下例子,详见PEP 257&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Return a foobang
Optional plotz says to frobnicate the bizbaz first.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;六命名规范&quot;&gt;六、命名规范&lt;/h4&gt;
&lt;h6 id=&quot;总体原则新编代码必须按下面命名风格进行现有库的编码尽量保持风格&quot;&gt;总体原则，新编代码必须按下面命名风格进行，现有库的编码尽量保持风格。&lt;/h6&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;模块命名尽量短小，使用全部小写的方式，可以使用下划线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;包命名尽量短小，使用全部小写的方式，不可以使用下划线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异常命名使用CapWords+Error后缀的方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两
种，一是__all__机制;二是前缀一个下划线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数命名使用全部小写的方式，可以使用下划线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;常量命名使用全部大写的方式，可以使用下划线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明__a,访问时，只能通过Foo._Foo__a，避免歧义。如果子类也叫Foo，那就无能为力了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类的方法第一个参数必须是self，而静态方法第一个参数必须是cls。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;七编码建议&quot;&gt;七、编码建议&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;编码中考虑到其他python实现的效率等问题，比如运算符‘+’在CPython（Python）中效率很高，都是Jython中却非常低，所以应该采用.join()的方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异常中不要使用裸露的except，except后跟具体的exceptions。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异常中try的代码尽可能少。比如：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_not_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要优于&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Too broad!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Will also catch KeyError raised by handle_value()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_not_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用startswith() and endswith()代替切片进行序列前缀或后缀的检查。比如：
Yes: &lt;code class=&quot;highlighter-rouge&quot;&gt;if foo.startswith('bar')&lt;/code&gt;:优于
No: &lt;code class=&quot;highlighter-rouge&quot;&gt;if foo[:3] == 'bar'&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用isinstance()比较对象的类型。比如
Yes: &lt;code class=&quot;highlighter-rouge&quot;&gt;if isinstance(obj, int)&lt;/code&gt;: 优于
No: &lt;code class=&quot;highlighter-rouge&quot;&gt;if type(obj) is type(1)&lt;/code&gt;:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;判断序列空或不空，有如下规则
Yes: &lt;code class=&quot;highlighter-rouge&quot;&gt;if not seq:
if seq:&lt;/code&gt;
优于
No: &lt;code class=&quot;highlighter-rouge&quot;&gt;if len(seq)
if not len(seq)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;字符串不要以空格收尾。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;二进制数据判断使用 if boolvalue的方式。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 06 Apr 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2016/04/06/python-standard.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2016/04/06/python-standard.html</guid>
        
        <category>优化</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python代码优化Tips(二)</title>
        <description>&lt;h4 id=&quot;使用enumerate后去序列迭代的索引和值&quot;&gt;⑥使用enumerate()后去序列迭代的索引和值&lt;/h4&gt;

&lt;p&gt;对于一个&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;li = ['a', 'b', 'c', 'd', 'e', 'f']&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一次获得其中的变量及索引有下面几种方法：&lt;/p&gt;

&lt;h6 id=&quot;方法一&quot;&gt;方法一：&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'index:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'element:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;方法二&quot;&gt;方法二：&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'index:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'element:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;方法三&quot;&gt;方法三：&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'index:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'element:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;方法四&quot;&gt;方法四：&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'index:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'element:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;方法五&quot;&gt;方法五：&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'index:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'element:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于字典便利迭代则使用如下方法：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dict1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;使用with自动关闭资源&quot;&gt;⑦使用with自动关闭资源&lt;/h4&gt;

&lt;p&gt;文件写入一例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f = open('test.txt', 'w')
&amp;gt;&amp;gt;&amp;gt; f.write('test')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样结束会发现文件并没有内容，原因是在操作完成后忘记关闭了，这是一个常识，二使用with就不会出现这样的情况：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;with语句可以在代码块执行完毕后还原进入该代码块的现场。包含有with语句的代码块的执行过程如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;计算表达式 的值，返回一个上下文管理器对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加载上下文管理器对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;方法以备用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调用上下文管理器对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;__enter__()&lt;/code&gt;方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果with语句中设置了目标对象，则将&lt;code class=&quot;highlighter-rouge&quot;&gt;__enter__()&lt;/code&gt;方法的返回值复制给目标对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行with中的代码块。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果步骤5中的代码正常结束，调用上下文管理器对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;方法，其返回值直接忽略。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果步骤5中的代码执行过程中发生异常，调用上下文管理器对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;方法，并将异常类型、值及traceback信息作为参数传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;。如果&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;返回值为false，则异常会被重新抛出；如果其返回值为true，异常会被挂起，程序继续执行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;__enter__()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__enter__()&lt;/code&gt;：进入与形式的上下文，返回运行时上下文相关的对象，with语句中会将这个返回值绑定到目标对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__(exception_type, exception_value, traceback)&lt;/code&gt;：退出运行时的上下文，定义在块执行（或终止）之后上下文管理器应该做什么。它可以处理异常，清理现场或者处理with块中语句执行完成后需要处理的动作。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自定义上下文管理器一例：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__enter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'entering...'&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__exit__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceprion_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'leaving...'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception_type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'no exceptions!'&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception_type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'value error!'&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'other error'&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;引用此class：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; with  MyClass():
•••     print 'testing...'
•••     raise(ValueError)
•••
entering...
testing...
leaving...
value error!
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; with MyClass():
•••     print 'testing'
•••
entering...
testing...
leaving...
no exceptions!
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了&lt;code class=&quot;highlighter-rouge&quot;&gt;__enter__()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;方法，还有&lt;code class=&quot;highlighter-rouge&quot;&gt;contextlib&lt;/code&gt;模块可以辅助上下文管理，该模块是通过Generator实现的，contextlib中的contextmanager作为装饰器来提供一种针对函数级别的上下文管理机制，可以直接说作用函数\对象而不用去关心&lt;code class=&quot;highlighter-rouge&quot;&gt;__enter__()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit__()&lt;/code&gt;方法的具体实现。具体可以百度。&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2016/02/20/python-tips-2.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2016/02/20/python-tips-2.html</guid>
        
        <category>优化</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python代码优化Tips(一)</title>
        <description>&lt;h4 id=&quot;函数设计&quot;&gt;①函数设计&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;函数设计尽量短小，嵌套层次不宜过深(3层)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数申明赢合理、简单、易使用，参数不宜过多。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数设计应考虑乡下兼容，使用需求变更和版本升级。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一个函数只做一件事情。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;将常量集中到一个文件&quot;&gt;②将常量集中到一个文件&lt;/h4&gt;

&lt;p&gt;将存放常量的文件命名为constant.py，并在其中定义一些列常量：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstCaseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__setattr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dict__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Can't change const.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstCaseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'const name &quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot; is not all uppercase'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dict__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MY_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'JACK'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当在其他模块中引用这些常量时，按照如下方式进行即可：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MY_NAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;数据交换不推荐使用中间变量&quot;&gt;③数据交换不推荐使用中间变量&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; temp = x
&amp;gt;&amp;gt;&amp;gt; x = y
&amp;gt;&amp;gt;&amp;gt; t = temp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x,y = y,x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;充分利用lazy-evaluation的特性&quot;&gt;④充分利用Lazy evaluation的特性&lt;/h4&gt;

&lt;p&gt;Lazy evaluation为”延迟计算”或”惰性计算”，Python中最典型的就是生成器表达式了。&lt;/p&gt;

&lt;h4 id=&quot;不推荐使用type进行类型检查&quot;&gt;⑤不推荐使用type进行类型检查&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import types
&amp;gt;&amp;gt;&amp;gt; string = 'abc'
&amp;gt;&amp;gt;&amp;gt; type(string) = types.StringType
True
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; string = 'abc'
&amp;gt;&amp;gt;&amp;gt; isinstance(string, str)
True
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 19 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2016/02/19/python-tips-1.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2016/02/19/python-tips-1.html</guid>
        
        <category>优化</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Python 元类</title>
        <description>&lt;h4 id=&quot;type&quot;&gt;type()&lt;/h4&gt;

&lt;p&gt;动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。&lt;/p&gt;

&lt;p&gt;比方说我们要定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;的class，就写一个&lt;code class=&quot;highlighter-rouge&quot;&gt;hello.py&lt;/code&gt;模块：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当Python解释器载入&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;的class对象，测试如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from hello import Hello
&amp;gt;&amp;gt;&amp;gt; h = Hello()
&amp;gt;&amp;gt;&amp;gt; h.hello()
Hello, world.
&amp;gt;&amp;gt;&amp;gt; print(type(Hello))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(type(h))
&amp;lt;class 'hello.Hello'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数可以查看一个类型或变量的类型，&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;是一个class，它的类型就是&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;，而&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;是一个实例，它的类型就是class &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们说class的定义是运行时动态创建的，而创建class的方法就是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数创建出&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;类，而无需通过&lt;code class=&quot;highlighter-rouge&quot;&gt;class Hello(object)...&lt;/code&gt;的定义：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def fn(self, name='world'): # 先定义函数
...     print('Hello, %s.' % name)
...
&amp;gt;&amp;gt;&amp;gt; Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class
&amp;gt;&amp;gt;&amp;gt; h = Hello()
&amp;gt;&amp;gt;&amp;gt; h.hello()
Hello, world.
&amp;gt;&amp;gt;&amp;gt; print(type(Hello))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(type(h))
&amp;lt;class '__main__.Hello'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要创建一个class对象，&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数依次传入3个参数：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;class的名称；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数创建出class。&lt;/p&gt;

&lt;p&gt;正常情况下，我们都用&lt;code class=&quot;highlighter-rouge&quot;&gt;class Xxx...&lt;/code&gt;来定义类，但是，&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。&lt;/p&gt;

&lt;h4 id=&quot;metaclass&quot;&gt;metaclass&lt;/h4&gt;

&lt;p&gt;除了使用&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;动态创建类以外，要控制类的创建行为，还可以使用metaclass。&lt;/p&gt;

&lt;p&gt;metaclass，直译为元类，简单的解释就是：&lt;/p&gt;

&lt;p&gt;当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。&lt;/p&gt;

&lt;p&gt;但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。&lt;/p&gt;

&lt;p&gt;连接起来就是：先定义metaclass，就可以创建类，最后创建实例。&lt;/p&gt;

&lt;p&gt;所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。&lt;/p&gt;

&lt;p&gt;metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。正常情况下，你不会碰到需要使用metaclass的情况，所以，以下内容看不懂也没关系，因为基本上你不会用到。&lt;/p&gt;

&lt;p&gt;我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;方法：&lt;/p&gt;

&lt;p&gt;定义&lt;code class=&quot;highlighter-rouge&quot;&gt;ListMetaclass&lt;/code&gt;，按照默认习惯，metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# metaclass是创建类，所以必须从`type`类型派生：&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListMetaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'add'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__metaclass__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListMetaclass&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 指示使用ListMetaclass来定制类&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当我们写下&lt;code class=&quot;highlighter-rouge&quot;&gt;__metaclass__ = ListMetaclass&lt;/code&gt;语句时，魔术就生效了，它指示Python解释器在创建&lt;code class=&quot;highlighter-rouge&quot;&gt;MyList&lt;/code&gt;时，要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ListMetaclass.__new__()&lt;/code&gt;来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__new__()&lt;/code&gt;方法接收到的参数依次是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;当前准备创建的类的对象；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类的名字；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类继承的父类集合；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类的方法集合。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;测试一下&lt;code class=&quot;highlighter-rouge&quot;&gt;MyList&lt;/code&gt;是否可以调用&lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; L = MyList()
&amp;gt;&amp;gt;&amp;gt; L.add(1)
&amp;gt;&amp;gt;&amp;gt; L
[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而普通的&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;没有&lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; l = list()
&amp;gt;&amp;gt;&amp;gt; l.add(1)
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: 'list' object has no attribute 'add'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;动态修改有什么意义？直接在&lt;code class=&quot;highlighter-rouge&quot;&gt;MyList&lt;/code&gt;定义中写上&lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;方法不是更简单吗？正常情况下，确实应该直接写，通过metaclass修改纯属变态。&lt;/p&gt;

&lt;p&gt;但是，总会遇到需要通过metaclass修改类定义的。ORM就是一个典型的例子。&lt;/p&gt;

&lt;p&gt;ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。&lt;/p&gt;

&lt;p&gt;要编写一个ORM框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。&lt;/p&gt;

&lt;p&gt;让我们来尝试编写一个ORM框架。&lt;/p&gt;

&lt;p&gt;编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个ORM框架，想定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;类来操作对应的数据库表&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;，我们期待他写出这样的代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 定义类的属性到列的映射：&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 创建一个实例：&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12345&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Michael'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test@orm.org'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my-pwd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 保存到数据库：&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，父类&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;和属性类型&lt;code class=&quot;highlighter-rouge&quot;&gt;StringField&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;IntegerField&lt;/code&gt;是由ORM框架提供的，剩下的魔术方法比如&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;全部由metaclass自动完成。虽然metaclass的编写会比较复杂，但ORM的使用者用起来却异常简单。&lt;/p&gt;

&lt;p&gt;现在，我们就按上面的接口来实现该ORM。&lt;/p&gt;

&lt;p&gt;首先来定义&lt;code class=&quot;highlighter-rouge&quot;&gt;Field&lt;/code&gt;类，它负责保存数据库表的字段名和字段类型：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_type&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;lt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Field&lt;/code&gt;的基础上，进一步定义各种类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;Field&lt;/code&gt;，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;StringField&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;IntegerField&lt;/code&gt;等等：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'varchar(100)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bigint'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下一步，就是编写最复杂的&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelMetaclass&lt;/code&gt;了：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelMetaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Model'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Found mapping: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s==&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterkeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__table__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 假设表名和类名一致&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__mappings__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 保存属性和列的映射关系&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以及基类&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__metaclass__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelMetaclass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__getattr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;'Model' object has no attribute '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__setattr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mappings__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'insert into &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s) values (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s)'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__table__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SQL: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ARGS: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当用户定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;class User(Model)&lt;/code&gt;时，Python解释器首先在当前类&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;的定义中查找&lt;code class=&quot;highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt;，如果没有找到，就继续在父类&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;中查找&lt;code class=&quot;highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt;，找到了，就使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;中定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelMetaclass&lt;/code&gt;来创建&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;类，也就是说，metaclass可以隐式地继承到子类，但子类自己却感觉不到。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelMetaclass&lt;/code&gt;中，一共做了几件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;排除掉对&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;类的修改；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在当前类（比如&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;）中查找定义的类的所有属性，如果找到一个Field属性，就把它保存到一个&lt;code class=&quot;highlighter-rouge&quot;&gt;__mappings__&lt;/code&gt;的dict中，同时从类属性中删除该Field属性，否则，容易造成运行时错误；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把表名保存到&lt;code class=&quot;highlighter-rouge&quot;&gt;__table__&lt;/code&gt;中，这里简化为表名默认为类名。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;类中，就可以定义各种操作数据库的方法，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;delete()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;等等。&lt;/p&gt;

&lt;p&gt;我们实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;方法，把一个实例保存到数据库中。因为有表名，属性到字段的映射和属性值的集合，就可以构造出INSERT语句。&lt;/p&gt;

&lt;p&gt;编写代码试试：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12345&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Michael'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test@orm.org'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my-pwd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Found model: User
Found mapping: email ==&amp;gt; &amp;lt;StringField:email&amp;gt;
Found mapping: password ==&amp;gt; &amp;lt;StringField:password&amp;gt;
Found mapping: id ==&amp;gt; &amp;lt;IntegerField:uid&amp;gt;
Found mapping: name ==&amp;gt; &amp;lt;StringField:username&amp;gt;
SQL: insert into User (password,email,username,uid) values (?,?,?,?)
ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;方法已经打印出了可执行的SQL语句，以及参数列表，只需要真正连接到数据库，执行该SQL语句，就可以完成真正的功能。&lt;/p&gt;

&lt;p&gt;不到100行代码，我们就通过metaclass实现了一个精简的ORM框架，完整的代码从这里下载：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/michaelliao/learn-python/blob/master/metaclass/simple_orm.py&quot;&gt;https://github.com/michaelliao/learn-python/blob/master/metaclass/simple_orm.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后解释一下类属性和实例属性。直接在class中定义的是类属性：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Student'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实例属性必须通过实例来绑定，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;self.name = 'xxx'&lt;/code&gt;。来测试一下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; # 创建实例s：
&amp;gt;&amp;gt;&amp;gt; s = Student()
&amp;gt;&amp;gt;&amp;gt; # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性：
&amp;gt;&amp;gt;&amp;gt; print(s.name)
Student
&amp;gt;&amp;gt;&amp;gt; # 这和调用Student.name是一样的：
&amp;gt;&amp;gt;&amp;gt; print(Student.name)
Student
&amp;gt;&amp;gt;&amp;gt; # 给实例绑定name属性：
&amp;gt;&amp;gt;&amp;gt; s.name = 'Michael'
&amp;gt;&amp;gt;&amp;gt; # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性：
&amp;gt;&amp;gt;&amp;gt; print(s.name)
Michael
&amp;gt;&amp;gt;&amp;gt; # 但是类属性并未消失，用Student.name仍然可以访问：
&amp;gt;&amp;gt;&amp;gt; print(Student.name)
Student
&amp;gt;&amp;gt;&amp;gt; # 如果删除实例的name属性：
&amp;gt;&amp;gt;&amp;gt; del s.name
&amp;gt;&amp;gt;&amp;gt; # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了：
&amp;gt;&amp;gt;&amp;gt; print(s.name)
Student

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因此，在编写程序的时候，千万不要把实例属性和类属性使用相同的名字。&lt;/p&gt;

&lt;p&gt;在我们编写的ORM中，&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelMetaclass&lt;/code&gt;会删除掉User类的所有类属性，目的就是避免造成混淆。&lt;/p&gt;

&lt;p&gt;转自&lt;a href=&quot;http://www.liaoxuefeng.com&quot;&gt;廖雪峰&lt;/a&gt;的网站&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2016/02/17/python-class.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2016/02/17/python-class.html</guid>
        
        <category>metaclass</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Django的权限机制</title>
        <description>&lt;h4 id=&quot;一django权限机制概述&quot;&gt;一、Django权限机制概述&lt;/h4&gt;

&lt;p&gt;权限机制能够约束用户行为，控制页面的显示内容，也能使API更加安全和灵活；用好权限机制，能让系统更加强大和健壮。因此，基于Django的开发，理清Django权限机制是非常必要的。&lt;/p&gt;

&lt;h5 id=&quot;1django的权限控制&quot;&gt;1.Django的权限控制&lt;/h5&gt;

&lt;p&gt;Django用user, group和permission完成了权限机制，这个权限机制是将属于model的某个permission赋予user或group，可以理解为全局的权限，即如果用户A对数据模型（model）B有可写权限，那么A能修改model B的所有实例（objects）。group的权限也是如此，如果为group C 赋予model B的可写权限，则隶属于group C 的所有用户，都可以修改model B的所有实例。&lt;/p&gt;

&lt;p&gt;这种权限机制只能解决一些简单的应用需求，而大部分应用场景下，需要更细分的权限机制。以博客系统为例，博客系统的用户可分为『管理员』、『编辑』、『作者』和『读者』四个用户组；博客系统管理员和编辑具有查看、修改和删除所有的文章的权限，作者只能修改和删除自己写的文章，而读者则只有阅读权限。管理员、编辑和读者的权限，我们可以用全局权限做控制，而对于作者，全局权限无法满足需求，仅通过全局权限，要么允许作者编辑不属于自己的文章，要么让作者连自己的文章都无法修改。&lt;/p&gt;

&lt;p&gt;上述的应用场景，Django自带的权限机制无法满足需求，需要引入另一种更细的权限机制：&lt;strong&gt;对象权限（object permission）&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Object Permission是一种对象颗粒度上的权限机制，它允许为每个具体对象授权。仍沿用最开始的例子，如果model B有三个实例 B1，B2 和B3，如果我们把B1的可写权限赋予用户A，则A可以修改B1对象，而对B2，B3无法修改。对group也一样，如果将B2的可写权限赋予group C，则隶属于group C的所有用户均可以修改B2，但无法修改B1和B3。结合Django自带权限机制和object permission，博客系统中作者的权限控制迎刃而解：系统全局上不允许作者编辑文章，而对于属于作者的具体文章，赋予编辑权限即可。&lt;/p&gt;

&lt;p&gt;Django其实包含了object permission的框架，但没有具体实现，object permission的实现需要借助第三方app django-guardian，我们在开发中用调用django guradian封装好的方法即可。&lt;/p&gt;

&lt;h5 id=&quot;2django的权限项&quot;&gt;2.Django的权限项&lt;/h5&gt;

&lt;p&gt;Django用permission对象存储权限项，每个model默认都有三个permission，即add model, change model和delete model。例如，定义一个名为『Car』model，定义好Car之后，会自动创建相应的三个permission：add_car, change_car和delete_car。Django还允许自定义permission，例如，我们可以为Car创建新的权限项：drive_car, clean_car, fix_car等等&lt;/p&gt;

&lt;p&gt;需要注意的是，permission总是与model对应的，如果一个object不是model的实例，我们无法为它创建/分配权限。&lt;/p&gt;

&lt;h4 id=&quot;二django-自带权限机制的应用&quot;&gt;二、Django 自带权限机制的应用&lt;/h4&gt;

&lt;h5 id=&quot;1permission&quot;&gt;1.Permission&lt;/h5&gt;

&lt;p&gt;如上文所述，Django定义每个model后，默认都会添加该model的add, change和delete三个permission，自定义的permission可以在我们定义model时手动添加：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;view_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Can see available tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;change_task_status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Can change the status of tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close_task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Can remove a task by setting its status as closed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每个permission都是django.contrib.auth.Permission类型的实例，该类型包含三个字段name, codename 和 content_type，其中 content_type反应了permission属于哪个model，codename如上面的view_task，代码逻辑中检查权限时要用， name是permission的描述，将permission打印到屏幕或页面时默认显示的就是name&lt;/p&gt;

&lt;p&gt;在model中创建自定义权限，从系统开发的角度，可理解为创建系统的内置权限，如果需求中涉及到用户使用系统时创建自定义权限，则要通过下面方法：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;myapp.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlogPost&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Permission&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.contenttypes.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_for_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'can_publish'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Can Publish Posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2user-permission管理&quot;&gt;2.User Permission管理&lt;/h5&gt;

&lt;p&gt;User对象的user_permission字段管理用户的权限：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#增加权限&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#删除权限&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#清空权限&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;##############################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 注：上面的permission为django.contrib.auth.Permission类型的实例&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##############################################################&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;检查用户权限用has_perm()方法：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp.fix_car'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;has_perm()方法的参数，即permission的codename，但传递参数时需要加上model 所属app的前缀，格式为.。&lt;/p&gt;

&lt;p&gt;无论permission赋予user还是group，has_perm()方法均适用&lt;/p&gt;

&lt;p&gt;附注：&lt;/p&gt;

&lt;p&gt;user.get_all_permissions()方法列出用户的所有权限，返回值是permission name的list&lt;/p&gt;

&lt;p&gt;user.get_group_permissions()方法列出用户所属group的权限，返回值是permission name的list&lt;/p&gt;

&lt;h5 id=&quot;3group-permission管理&quot;&gt;3.Group Permission管理&lt;/h5&gt;

&lt;p&gt;group permission管理逻辑与user permission管理一致，group中使用permissions字段做权限管理：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;权限检查：&lt;/p&gt;

&lt;p&gt;依然使用user.has_perm()方法。&lt;/p&gt;

&lt;h5 id=&quot;4permission_required-装饰器&quot;&gt;4.permission_required 装饰器&lt;/h5&gt;

&lt;p&gt;权限能约束用户行为，当业务逻辑中涉及到权限检查时，decorator能够分离权限验证和核心的业务逻辑，使代码更简洁，逻辑更清晰。permission的decorator为permission_required：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission_required&lt;/span&gt;
 
&lt;span class=&quot;nd&quot;&gt;@permission_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'car.drive_car'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;5template中的权限检查&quot;&gt;5.Template中的权限检查&lt;/h5&gt;

&lt;p&gt;Template中使用全局变量perms存储当前用户的所有权限，权限检查可以参考下面例子：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% if perms.main.add_page %}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dropdown&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dropdown-toggle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dropdown&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-expanded=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Pages &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;caret&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dropdown-menu&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url &quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main:admin_pages&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;All Pages&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url &quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main:admin_page&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;New Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url &quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main:admin_pages&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}?&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;draft=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Drafts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;三基于django-guardian的object-permission的应用&quot;&gt;三、基于Django-guardian的object permission的应用&lt;/h4&gt;

&lt;p&gt;Django-guardian基于django的原生逻辑扩展了django的权限机制，应用django-guardian后，可以使用django-guardian提供的方法以及django的原生方法检查全局权限，django-guardian提供的object permission机制使django的权限机制更加完善。&lt;/p&gt;

&lt;p&gt;django-guardian详细的使用文档请参考官方文档，其object permission常用方法如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;guardian.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assign_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_perms&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;guardian.core&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectPermissionChecker&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;guardian.decorators&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission_required&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;1添加object-permission&quot;&gt;1.添加object permission&lt;/h5&gt;

&lt;p&gt;添加object permission使用assign_perm()方法，如为用户添加对mycar对象的drive_car权限：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assign_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp.drive_car'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mycar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;assign_perm()方法也可用于group&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assign_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myapp.drive_car'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mygroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mycar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2权限检查&quot;&gt;2.权限检查&lt;/h5&gt;

&lt;h6 id=&quot;21-global-permission&quot;&gt;2.1 Global permission&lt;/h6&gt;

&lt;p&gt;get_perms()方法用于检查用户的“全局权限”（global permission），与user.has_perm()异曲同工，如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#############################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# It works! &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#############################&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'main.change_post'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_perms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Forbidden'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#############################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# It works, too!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#############################&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'main.change_post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Forbidden'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例子中虽然把post object作为参数传给get_perms()方法，但它只检查user的全局权限中是否有main.change_post权限，很多情况下可用原生的user.has_perm取代，但user和group均可作为get_perms()的传入参数，某些情况下可以使代码更简洁。&lt;/p&gt;

&lt;h6 id=&quot;22-object-permission&quot;&gt;2.2 Object permission&lt;/h6&gt;

&lt;p&gt;Django-guardian中使用ObjectPermissionChecker检查用户的object permission，示例如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;checker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectPermissionChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'main.change_post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3permission_required装饰器&quot;&gt;3.permission_required装饰器&lt;/h5&gt;

&lt;p&gt;guardian.decorators.permission_required是django-guardian权限检查的decorator，既可以检查全局权限，又可以检查对象权限（object permission），其中，accept_global_perms参数指出是否检查user的global permission，如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;guardian.decorators&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission_required&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeletePost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@method_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'main.delete_post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'pk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;accept_global_perms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is_draft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_draft&lt;/span&gt;
 
            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'main:admin_posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_draft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{0}?draft=true'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
            &lt;span class=&quot;n&quot;&gt;cur_post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Http404&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：&lt;/p&gt;

&lt;p&gt;decorator中的(models.Post, ‘id’, ‘pk’)部分，用于指定object实例，如果忽略这个参数，则不论accept_global_perms值为True还是False，均仅仅检查全局权限。&lt;/p&gt;

&lt;h4 id=&quot;四结论&quot;&gt;四、结论&lt;/h4&gt;

&lt;p&gt;Django原生提供了一种简单的全局权限（global permission）控制机制，但很多应用场景下，对象权限（object permission）更加有用；django-guardian是目前比较活跃的一个django extension，提供了一种有效的object permission控制机制，与django原生机制一脉相承，推荐使用。&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2016/02/06/django-permission.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2016/02/06/django-permission.html</guid>
        
        <category>django</category>
        
        <category>permission</category>
        
        <category>权限</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>通过supervisord管理celery守护进程</title>
        <description>&lt;h4 id=&quot;why-supervisord&quot;&gt;Why Supervisord&lt;/h4&gt;

&lt;p&gt;supervisord是一个python写的守护进程管理工具，功能非常实用。&lt;/p&gt;

&lt;p&gt;supervisord的介绍可以看这篇文章。 在生成环境，celery worker进程通常会以守护进程的方式运行，而celery命令行工具本身是不支持以daemon方式运行的，虽然可以nohup celery worker &amp;amp;的方式让worker进程在后台运行，但是当有多个celery worker进程时，这种方式管理起来就会变得很麻烦，想要stop,restart还得一个个去kill pid。 supervisord是celery官方推荐的daemon管理工具之一，可以对多个进程统一进行监控，管理。&lt;/p&gt;

&lt;h4 id=&quot;configuration&quot;&gt;Configuration&lt;/h4&gt;

&lt;p&gt;配置其实很简单，主要就是设置supervisord.conf和celerd.conf两个文件。celery官方还提供了这两个文件的示例
下面是我这两个文件的设置，提供给正在弄这个的同学们参考。&lt;/p&gt;

&lt;p&gt;supervisord.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[unix_http_server]
file=/tmp/supervisor.sock   ; path to your socket file
;chmod=0777
;chown=webscan:webscan

[inet_http_server]
port=1222
username=sinasec
password=xxxxxxx

[supervisord]
logfile=/var/log/supervisord/supervisord.log ; supervisord log file
logfile_maxbytes=50MB       ; maximum size of logfile before rotation
logfile_backups=10          ; number of backed up logfiles
loglevel=info               ; info, debug, warn, trace
pidfile=/var/run/supervisord.pid ; pidfile location
nodaemon=false              ; run supervisord as a daemon
minfds=1024                 ; number of startup file descriptors
minprocs=200                ; number of process descriptors
user=root                  ; default user
childlogdir=/var/log/supervisord/            ; where child log files will live

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use unix:// schem for a unix sockets.

; celery的监控工具flower自身也不支持以daemon方式运行，刚好也可以通过supervisord管理起来。
[program:flower]
command=/usr/local/bin/flower --adress=0.0.0.0 --port=1221 
autostart=true
autorestart=true
user=webscan
directory=/var/webscan/scanner/
stdout_logfile_maxbytes = 50MB
stdoiut_logfile_backups = 20
stdout_logfile = /var/log/flower.log

[include]

# Uncomment this line for celeryd for Python
files=celeryd.conf

# Uncomment this line for celeryd for Django.
;files=django/celeryd.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;基本上就是官方那个配置文件，拿过来加上了flower的设置。&lt;/p&gt;

&lt;p&gt;celerd.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[program:celery]
command=celery worker --hostname=celery-%(process_num)d.webscan.com --loglevel=INFO

process_name = %(program_name)s-%(process_num)d

environment=PYTHONPATH=/var/webscan/scanner/

directory=/var/webscan/scanner
user=webscan
numprocs=4  
stdout_logfile=/var/log/celeryd.log
stderr_logfile=/var/log/celeryd.log
autostart=true
autorestart=true
startsecs=10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个设置里比较不同的是numprocs我设置成了4，既celery worker进程会同时起4个，分别命名celery-0 ,celery-1。之所以要在一台机器上起4个worker进程，是因为我们的celery pool用的是gevent，而为了充分利用多核，因此一台机器上需要起4个worker。&lt;/p&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;
&lt;p&gt;上面的设置都完成后先启动supervisord&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;supervisord -c /etc/supervisord.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就可以通过supervisorctl对这些进程进行管理了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;supervisorctl restart flower
supervisorctl stop celery:celery-0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;浏览器访问http://10.1.1.1:1222/ 还可以通过web对这些进程进行管理
&lt;img src=&quot;http://www.jack003.com/static/img/blog/supervisord_celery/celery-web.jpg&quot; alt=&quot;celery&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Feb 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/linux/2016/02/04/supervisord-celery.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/linux/2016/02/04/supervisord-celery.html</guid>
        
        <category>django</category>
        
        <category>celery</category>
        
        <category>supervisord</category>
        
        
        <category>Python</category>
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>关于git的ssh-key:解决本地多个ssh-key的问题</title>
        <description>&lt;p&gt;在设置github的时候，官方的说明文档要求备份当前的id_rsa，然后生成一份新的私钥用于github的登陆。如果真这样做，那么新的私钥是无法再继续登陆之前的机器的。这种方法有点暴力…
还好ssh可以让我们通过不同的私钥来登陆不同的域。&lt;/p&gt;

&lt;p&gt;首先，在新增私钥的时候，通过指定不同的文件名来生成不同的私钥文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa -f ~/.ssh/id_rsa.work -C &quot;Key for Work&quot;  
ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &quot;Key for GitHub&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新增ssh的配置文件，并修改权限&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch ~/.ssh/config  
chmod 600 ~/.ssh/config 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改config文件的内容&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host *.workdomain.com   
    IdentityFile ~/.ssh/id_rsa.work  
    User lee  
   
Host github.com  
    IdentityFile ~/.ssh/id_rsa.github  
    User git  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样在登陆的时候，ssh会根据登陆不同的域来读取相应的私钥文件&lt;/p&gt;

</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2016/01/03/git-ssh-key.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2016/01/03/git-ssh-key.html</guid>
        
        <category>ssh</category>
        
        <category>key</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Django多环境配置settings</title>
        <description>&lt;p&gt;在Django中的settings.py中可以修改130多项设置, 但大多数都继承自默认值. 设置是在web服务器启动时首次载入的, 服务器重启时重新载入, 因此, 程序员们应尽量避免修改正式服务器上使用的settings.py文件. 以下是一些我们应当遵循的原则:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有的设置文件应当进行版本管理&lt;/li&gt;
  &lt;li&gt;不要重复自己 (don’t repeat yourself)&lt;/li&gt;
  &lt;li&gt;妥善保存关键信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前, 我们采用的方法是, 不将设置文件放入git库中, 每个开发人员本地有一份自己的设置文件. 但我们发现这样做是错误的. 因为:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在debug之前, 我们可能已经花费了大量精力去模拟正式服务器上出现的错误, 但最终发现这是由于正式服务器的settings文件设置和本地不同而 出现的问题. 这时你的心情会是怎样?&lt;/li&gt;
  &lt;li&gt;当你在开发django项目时, 发现并修复了一个bug. 当将这一commit push到服务器后, 你突然发现这一bug的出现完全是因为你修改了本地的 settings文件而产生的, 而由于你的push, 又导致了服务器的宕机. 这时你又会是怎样的感受?&lt;/li&gt;
  &lt;li&gt;每个人都会从另一个程序员那里拷贝/黏贴settings文件内容, 这难道不是违反了”不要重复自己”的原则吗?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正式由于这些问题, 所以我们现在采用不一样的设置方式. 我们首先建立一个基本的设置文件, 然后将开发和正式部署的设置文件分离成不同的模块, 但 这些模块都继承自同一个基本设置文件:&lt;/p&gt;

&lt;h4 id=&quot;使用分离式的设置文件&quot;&gt;使用分离式的设置文件&lt;/h4&gt;
&lt;p&gt;django项目建立时, 会自动生成settings.py文件. 为了实现分离式的设置文件, 我们首先删除settings.py, 然后建立settings目录:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;settings/
        __init__.py
        base.py
        local.py
        test.py
        production.py
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;设置文件&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;目的&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;base.py&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;基本设置文件, 在各个环境中都相同的设置可以放入其中.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dev.py&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;当在开发时使用的设置文件. 可以设置开发时的选项, 包括DEBUG, log的等级, 是否开启例如 django-debug-toolbar等开发工具等.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;test.py&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;运行test时的配置, 包括test runners, in-memory数据库定义和log设置等.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;product.py&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;当部署到正式服务器上所用的设置.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们可以使用以下命令使用这些不同的设置文件:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py shell --settings=mysite.settings.local
python manage.py runserver --settings=mysite.settings.local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然如果你熟悉 DJANGO_SETTINGS_MODULE 和 PYTHONPATH 的话, 也可以事先设置好 DJANGO_SETTINGS_MODULE 和 PYTHONPATH 环境变量, 这样做的好处就是你不必使用–settings了.&lt;/p&gt;

&lt;p&gt;如果你对virtualenv有深入的了解的话, 也可以在postactivate脚本中设置 DJANGO_SETTINGS_MODULE 和 PYTHONPATH.&lt;/p&gt;

&lt;p&gt;这里我使用了test.py和product.py来区分两个不同的配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/django_settings/tree.jpg&quot; alt=&quot;tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先看__init__.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;platform&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;94_54&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中”94_54”是正式环境的服务器的主机名，可以用hostname命令查看到&lt;/p&gt;

&lt;p&gt;然后，我们可以在不同的py文件中（product，test）放入不同的配置，如数据库连接，其他登陆信息。&lt;/p&gt;

&lt;p&gt;今后从仓库中拉取代码和从集成开发环境中直接打包代码文件就可以直接放入测试环境或者正式环境使用了。&lt;/p&gt;

&lt;p&gt;base.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Django settings for saplatform project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Quick-start development settings - unsuitable for production&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# SECURITY WARNING: keep the secret key used in production secret!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SECRET_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'za5nj^ga!a$+t8rg&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%9&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kq8j8)1ig7=s!#g!p&amp;amp;_$x9##8&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u0$--'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# SECURITY WARNING: don't run with debug turned on in production!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Application definition&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.common.CommonMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.locale.LocaleMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.auth.middleware.SessionAuthenticationMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.messages.middleware.MessageMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.clickjacking.XFrameOptionsMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.middleware.security.SecurityMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'saplatform.urls'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TEMPLATES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'BACKEND'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.template.backends.django.DjangoTemplates'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'DIRS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'templates'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'APP_DIRS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'OPTIONS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'context_processors'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'django.template.context_processors.debug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'django.template.context_processors.request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'django.contrib.auth.context_processors.auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'django.contrib.messages.context_processors.messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'saplatform.wsgi.application'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Database&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://docs.djangoproject.com/en/1.8/ref/settings/#databases&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# see test.py &amp;amp;&amp;amp; product.py&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Internationalization&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://docs.djangoproject.com/en/1.8/topics/i18n/&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'zh-hans'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TIME_ZONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Asia/Shanghai'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;USE_I18N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;USE_L10N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;USE_TZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Static files (CSS, JavaScript, Images)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://docs.djangoproject.com/en/1.8/howto/static-files/&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LOGIN_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/users/login/'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STATIC_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/static/'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'static'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# SESSION_COOKIE_AGE = 60 * 10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;base.py中需要注意调整的是BASE_DIR变量，需要套一层os.path.dirname()函数，因为是在settings目录下的文件。&lt;/p&gt;

&lt;p&gt;test.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.mysql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'******'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'***'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'******'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'***.***.***.***'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3306'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SALTAPI_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://127.0.0.1:8000'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SALTAPI_USER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'****'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SALTAPI_PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'****'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2015/12/21/django-settings.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2015/12/21/django-settings.html</guid>
        
        <category>django</category>
        
        <category>settings</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>MySQL查看表大小</title>
        <description>&lt;p&gt;方法一：&lt;/p&gt;

&lt;p&gt;在MySQL的data目录下查看，前提是my.cnf中配置了innodb_file_per_table&lt;/p&gt;

&lt;p&gt;方法二：&lt;/p&gt;

&lt;p&gt;在MySQL查询中执行以下操作：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_length_GB&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_length_GB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 01 Nov 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//database/2015/11/01/mysql-table-size.html</link>
        <guid isPermaLink="true">http://localhost:4000//database/2015/11/01/mysql-table-size.html</guid>
        
        <category>MySQL</category>
        
        <category>table</category>
        
        <category>大小</category>
        
        
        <category>Database</category>
        
      </item>
    
      <item>
        <title>hadoop初识（从安装到查询)</title>
        <description>&lt;p&gt;花了一个星期，把hadoop整套算是搞通了，做这套hadoop是给bi做数据分析使用的，之前他们是用MySQL cluster来做数据查询，MySQL cluster的好处是数据全部加载到内存中，查询会非常快，不足的地方是数据容量受限，内存多大，数据最多能放多少，所以我们新建设了一套hadoop集群。&lt;/p&gt;

&lt;p&gt;搭建hadoop集群，我们使用的&lt;a href=&quot;http://ambari.apache.org/&quot;&gt;ambari&lt;/a&gt;组建，这套组建能够让你自由的组织和扩容hadoop集群，官网地址为：http://ambari.apache.org/ ，我安装了最新版本2.2.0。&lt;/p&gt;

&lt;p&gt;安装过程网上很多，这里给出我的安装清单：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Admin Name : admin 
Cluster Name : BI_hadoop 
Total Hosts : 5 (5 new) 
Repositories:
 debian7 (HDP-2.3):
  http://public-repo-1.hortonworks.com/HDP/debian7/2.x/updates/2.3.4.0
 debian7 (HDP-UTILS-1.1.0.20):
  http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/debian6
 redhat6 (HDP-2.3):
  http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.3.4.0
 redhat6 (HDP-UTILS-1.1.0.20):
  http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/centos6
 redhat7 (HDP-2.3):
  http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.3.4.0
 redhat7 (HDP-UTILS-1.1.0.20):
  http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/centos7
 suse11 (HDP-2.3):
  http://public-repo-1.hortonworks.com/HDP/suse11sp3/2.x/updates/2.3.4.0
 suse11 (HDP-UTILS-1.1.0.20):
  http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/suse11sp3
 ubuntu12 (HDP-2.3):
  http://public-repo-1.hortonworks.com/HDP/ubuntu12/2.x/updates/2.3.4.0
 ubuntu12 (HDP-UTILS-1.1.0.20):
  http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/ubuntu12
 ubuntu14 (HDP-2.3):
  http://public-repo-1.hortonworks.com/HDP/ubuntu14/2.x/updates/2.3.4.0
 ubuntu14 (HDP-UTILS-1.1.0.20):
  http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/ubuntu12

Services:
HDFS
  DataNode : 3 hosts 
  NameNode :hadoop1 
  NFSGateway : 0 
  host SNameNode :hadoop1
YARN + MapReduce2
  App Timeline Server :hadoop1 
  NodeManager : 3 hosts 
  ResourceManager :hadoop1
Tez
 Clients : 3 hosts
Hive
  Metastore : hadoop1
  HiveServer2 : ambari
  WebHCat Server : ambari
  Database : MySQL (New MySQL Database)
Pig
  Clients : 3 hosts 
Sqoop
  Clients : 3 hosts 
ZooKeeper
  Server : ambari 
Ambari Metrics
  Metrics Collector : ambari 
Spark
  History Server : ambari 
  Thrift Server : 0 host
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ambari主页面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/hadoop_ambari/ambari.png&quot; alt=&quot;amabri&quot; /&gt;&lt;/p&gt;

&lt;p&gt;hadoop的各项配置可以按照ambari给的参考配置设定，在web端即可实现hive接口查询数据：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/hadoop_ambari/hive-web.png&quot; alt=&quot;amabri&quot; /&gt;&lt;/p&gt;

&lt;p&gt;数据录入我们是通过MySQL的select into outfile到txt文件，然后在hive中load到hadoop中，中间遇到一些坑，是MySQL一些字段的换行符，这个问题查看一下我的上一篇文章，在hive创建数据库表中，text字段可以用string替代，*int(*)换成*int即可。&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Oct 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//database/2015/10/16/hadoop-ambari.html</link>
        <guid isPermaLink="true">http://localhost:4000//database/2015/10/16/hadoop-ambari.html</guid>
        
        <category>hadoop</category>
        
        <category>ambari</category>
        
        
        <category>Database</category>
        
      </item>
    
      <item>
        <title>MySQL去除字段中的换行和回车符</title>
        <description>&lt;p&gt;在录入MySQL数据到hive中踩了一个大坑，由于中间保存的文本是TXT格式，导入完成后，行数总是对不上。&lt;/p&gt;

&lt;p&gt;解决方法：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;char(10):  换行符
char(13):  回车符&lt;/p&gt;

&lt;p&gt;MySQL的trim函数没办法去掉回车和换行，只能去掉多余的空格，可以用MySQL的replace函数，解决掉这个问题，具体解决办法如下：&lt;/p&gt;

&lt;p&gt;假设想要审核数据库中内容为&lt;/p&gt;

&lt;p&gt;“我爱你&lt;/p&gt;

&lt;p&gt;”&lt;/p&gt;

&lt;p&gt;的短信息(注意内容后有换行)通过(status改变成1)之前的SQL语句是不起作用的&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`tran`&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`status`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`msg`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'我爱你'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改之后的语句&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`tran`&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`status`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`msg`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'我爱你'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把数据中的回车换行等替换成空格之后再trim掉，就达到目的了，虽然不是特别完美，但是由于没办法在用户录入的时候控制，所以只能出此下策，好在MySQL内置函数的效率还是很有保证的。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`tran`&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`status`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;BOTH&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'我爱你'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;用了两个trim，这样的好处是不会替换内容中间的换行和回车，只会处理头尾的空格换行回车，相当于php中trim函数的作用了。&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Oct 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//database/2015/10/15/mysql-n-r.html</link>
        <guid isPermaLink="true">http://localhost:4000//database/2015/10/15/mysql-n-r.html</guid>
        
        <category>MySQL</category>
        
        <category>换行符</category>
        
        <category>回车符</category>
        
        
        <category>Database</category>
        
      </item>
    
      <item>
        <title>我们在沙巴</title>
        <description>&lt;h2 id=&quot;沙巴美景&quot;&gt;沙巴美景&lt;/h2&gt;

&lt;h4 id=&quot;沙巴附近的海域&quot;&gt;沙巴附近的海域&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/Malaysia_Sabah/1.jpg&quot; alt=&quot;Sabah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;海水变成绿色的，在香蕉船上拍的照片。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/Malaysia_Sabah/2.jpg&quot; alt=&quot;Sabah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;去红树林看猴子，远处的海滩。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/Malaysia_Sabah/7.jpg&quot; alt=&quot;Sabah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在沙巴附近小岛的沙滩游泳拍照。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/Malaysia_Sabah/3.jpg&quot; alt=&quot;Sabah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;沙巴清真寺一游&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/Malaysia_Sabah/6.jpg&quot; alt=&quot;Sabah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实我也看不懂书的内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/Malaysia_Sabah/5.jpg&quot; alt=&quot;Sabah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;哈哈&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/Malaysia_Sabah/4.jpg&quot; alt=&quot;Sabah&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Oct 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//life/2015/10/04/sabah-travel.html</link>
        <guid isPermaLink="true">http://localhost:4000//life/2015/10/04/sabah-travel.html</guid>
        
        <category>Life</category>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>rsync简单使用</title>
        <description>&lt;p&gt;无用户名密码共享文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uid = root  
gid = root  
use chroot = no  
max connections = 100  
pid file = /var/run/rsyncd.pid  
lock file = /var/run/rsyncd.cock  
log file = /var/log/rsync.log  
list = no  
strict modes = no  

[rdata]  
path = /home/rsync_fwg
read only = yes 
hosts allow = 192.168.112.243,192.168.104.112,192.168.112.136
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用密码文件进行用户认证共享：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Minimal configuration file for rsync daemon
# See rsync(1) and rsyncd.conf(5) man pages for help

# This line is required by the /etc/init.d/rsyncd script
# GLOBAL OPTIONS
uid = root                         
gid = root                                  
use chroot = yes                            
read only = no                            
max connections = 50                      

pid file = /var/run/rsyncd.pid             

secrets file = /etc/rsyncd.secrets   
#lock file = /var/run/rsync.lock           

#This will give you a separate log file
log file = /var/log/rsync.log               

timeout = 600

# MODULE OPTIONS
[game]                               
path = /home/dir/gameantispam/pluguser                       
#ignore errors                              
auth users = game                          
#comment = gameantispam    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;/etc/rsyncd.secrets文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;game:game
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动rsync：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rsync --daemon --config=/etc/rsyncd.conf --port=8723
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;远程同步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;无用户同步：&lt;code class=&quot;highlighter-rouge&quot;&gt;
rsync -avR --delete --port=8723 192.168.112.243::rdata/ ./
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户认证同步： &lt;code class=&quot;highlighter-rouge&quot;&gt;
rsync -avR --delete --port=8723 dir@123.58.188.133::antiplug/ ./
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 30 Sep 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/09/30/rsync.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/09/30/rsync.html</guid>
        
        <category>rsync</category>
        
        <category>共享</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>tomcat配置优化参数</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LD_LIBRARY_PATH=/home/opt/tools/apr/lib
JAVA_OPTS=&quot;-server -XX:PermSize=128M -XX:MaxPermSize=256m -Xms1g -Xmx1g -Xmn500m -XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=0 -Duser.timezone=Asia/Shanghai&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;tomcat启动行参数的优化&quot;&gt;Tomcat启动行参数的优化&lt;/h4&gt;

&lt;p&gt;Tomcat 的启动参数位于tomcat的安装目录\bin目录下，如果你是Linux操作系统就是catalina.sh文件，如果你是Windows操作系统那么你需要改动的就是catalina.bat文件。打开该文件，一般该文件头部是一堆的由##包裹着的注释文字，找到注释文字的最后一段如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# $Id: catalina.sh 522797 2007-03-27 07:10:29Z fhanik $
# -----------------------------------------------------------------------------
 
# OS specific support.  $var _must_ be set to either true or false.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;敲入一个回车，加入如下的参数&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux系统中tomcat的启动参数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_OPTS=&quot;-server -Xms1400M -Xmx1400M -Xss512k -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:PermSize=128M -XX:MaxPermSize=256M -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=31 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC  -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m  -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless=true &quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Windows系统中tomcat的启动参数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set JAVA_OPTS=-server -Xms1400M -Xmx1400M -Xss512k -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:PermSize=128M -XX:MaxPermSize=256M -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=31 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC  -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m  -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless=true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面参数好多啊，可能有人写到现在都没见一个tomcat的启动命令里加了这么多参数，当然，这些参数只是我机器上的，不一定适合你，尤其是参数后的value（值）是需要根据你自己的实际情况来设置的。&lt;/p&gt;

&lt;p&gt;参数解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我不管你什么理由，只要你的tomcat是运行在生产环境中的，这个参数必须给我加上&lt;/p&gt;

&lt;p&gt;因为tomcat默认是以一种叫java –client的模式来运行的，server即意味着你的tomcat是以真实的production的模式在运行的，这也就意味着你的tomcat以server模式运行时将拥有：更大、更高的并发处理能力，更快更强捷的JVM垃圾回收机制，可以获得更多的负载与吞吐量。。。更。。。还有更。。。&lt;/p&gt;

&lt;p&gt;Y给我记住啊，要不然这个-server都不加，那是要打屁股了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-Xms–Xmx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即JVM内存设置了，把Xms与Xmx两个值设成一样是最优的做法，有人说Xms为最小值，Xmx为最大值不是挺好的，这样设置还比较人性化，科学化。人性？科学？你个头啊。&lt;/p&gt;

&lt;p&gt;大家想一下这样的场景：&lt;/p&gt;

&lt;p&gt;一个系统随着并发数越来越高，它的内存使用情况逐步上升，上升到最高点不能上升了，开始回落，你们不要认为这个回落就是好事情，由其是大起大落，在内存回落时它付出的代价是CPU高速开始运转进行垃圾回收，此时严重的甚至会造成你的系统出现“卡壳”就是你在好好的操作，突然网页像死在那边一样几秒甚至十几秒时间，因为JVM正在进行垃圾回收。&lt;/p&gt;

&lt;p&gt;因此一开始我们就把这两个设成一样，使得Tomcat在启动时就为最大化参数充分利用系统的效率，这个道理和jdbcconnection pool里的minpool size与maxpool size的需要设成一个数量是一样的原理。&lt;/p&gt;

&lt;p&gt;如何知道我的JVM能够使用最大值啊？拍脑袋？不行！&lt;/p&gt;

&lt;p&gt;在设这个最大内存即Xmx值时请先打开一个命令行，键入如下的命令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/tomcat-optimize/1.jpg&quot; alt=&quot;tomcat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看，能够正常显示JDK的版本信息，说明，这个值你能够用。不是说32位系统下最高能够使用2GB内存吗？即：2048m，我们不防来试试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/tomcat-optimize/2.jpg&quot; alt=&quot;tomcat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以吗？不可以！不要说2048m呢，我们小一点，试试1700m如何&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/tomcat-optimize/3.jpg&quot; alt=&quot;tomcat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;嘿嘿，连1700m都不可以，更不要说2048m了呢，2048m只是一个理论数值，这样说吧我这边有几台机器，有的机器-Xmx1800都没问题，有的机器最高只能到-Xmx1500m。&lt;/p&gt;

&lt;p&gt;因此在设这个-Xms与-Xmx值时一定一定记得先这样测试一下，要不然直接加在tomcat启动命令行中你的tomcat就再也起不来了，要飞是飞不了，直接成了一只瘟猫了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;–Xmn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设置年轻代大小为512m。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-Xss&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程 大约需要占用多少内存，可能会有多少线程同时运行等。一般不易设置超过1M，要不然容易出现out ofmemory。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+AggressiveOpts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作用如其名（aggressive），启用这个参数，则每当JDK版本升级时，你的JVM都会使用最新加入的优化技术（如果有的话）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+UseBiasedLocking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;启用一个优化了的线程锁，我们知道在我们的appserver，每个http请求就是一个线程，有的请求短有的请求长，就会有请求排队的现象，甚至还会出现线程阻塞，这个优化了的线程锁使得你的appserver内对线程处理自动进行最优调配。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:PermSize=128M-XX:MaxPermSize=256M&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JVM使用-XX:PermSize设置非堆内存初始值，默认是物理内存的1/64；&lt;/p&gt;

&lt;p&gt;在数据量的很大的文件导出时，一定要把这两个值设置上，否则会出现内存溢出的错误。&lt;/p&gt;

&lt;p&gt;由XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4。&lt;/p&gt;

&lt;p&gt;那么，如果是物理内存4GB，那么64分之一就是64MB，这就是PermSize默认值，也就是永生代内存初始大小；&lt;/p&gt;

&lt;p&gt;四分之一是1024MB，这就是MaxPermSize默认大小。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+DisableExplicitGC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在程序代码中不允许有显示的调用”System.gc()”。看到过有两个极品工程中每次在DAO操作结束时手动调用System.gc()一下，觉得这样做好像能够解决它们的out ofmemory问题一样，付出的代价就是系统响应时间严重降低，就和我在关于Xms,Xmx里的解释的原理一样，这样去调用GC导致系统的JVM大起大落，性能不到什么地方去哟！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+UseParNewGC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对年轻代采用多线程并行回收，这样收得快。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+UseConcMarkSweepGC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即CMS gc，这一特性只有jdk1.5即后续版本才具有的功能，它使用的是gc估算触发和heap占用触发。&lt;/p&gt;

&lt;p&gt;我们知道频频繁的GC会造面JVM的大起大落从而影响到系统的效率，因此使用了CMS GC后可以在GC次数增多的情况下，每次GC的响应时间却很短，比如说使用了CMS GC后经过jprofiler的观察，GC被触发次数非常多，而每次GC耗时仅为几毫秒。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:MaxTenuringThreshold&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概率。&lt;/p&gt;

&lt;p&gt;这个值的设置是根据本地的jprofiler监控后得到的一个理想的值，不能一概而论原搬照抄。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+CMSParallelRemarkEnabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在使用UseParNewGC 的情况下, 尽量减少 mark 的时间&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+UseCMSCompactAtFullCollection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在使用concurrent gc 的情况下, 防止 memoryfragmention, 对live object 进行整理, 使 memory 碎片减少。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:LargePageSizeInBytes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指定 Java heap的分页页面大小&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+UseFastAccessorMethods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;get,set 方法转成本地代码&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:+UseCMSInitiatingOccupancyOnly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指示只有在 oldgeneration 在使用了初始化的比例后concurrent collector 启动收集&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:CMSInitiatingOccupancyFraction=70&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CMSInitiatingOccupancyFraction，这个参数设置有很大技巧，基本上满足(Xmx-Xmn)*(100- CMSInitiatingOccupancyFraction)/100&amp;gt;=Xmn就不会出现promotion failed。在我的应用中Xmx是6000，Xmn是512，那么Xmx-Xmn是5488兆，也就是年老代有5488 兆，CMSInitiatingOccupancyFraction=90说明年老代到90%满的时候开始执行对年老代的并发垃圾回收（CMS），这时还 剩10%的空间是5488*10%=548兆，所以即使Xmn（也就是年轻代共512兆）里所有对象都搬到年老代里，548兆的空间也足够了，所以只要满 足上面的公式，就不会出现垃圾回收时的promotion failed；&lt;/p&gt;

&lt;p&gt;因此这个参数的设置必须与Xmn关联在一起。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-Djava.awt.headless=true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个参数一般我们都是放在最后使用的，这全参数的作用是这样的，有时我们会在我们的J2EE工程中使用一些图表工具如：jfreechart，用于在web网页输出GIF/JPG等流，在winodws环境下，一般我们的app server在输出图形时不会碰到什么问题，但是在linux/unix环境下经常会碰到一个exception导致你在winodws开发环境下图片显示的好好可是在linux/unix下却显示不出来，因此加上这个参数以免避这样的情况出现。&lt;/p&gt;

&lt;p&gt;上述这样的配置，基本上可以达到：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;系统响应时间增快&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JVM回收速度增快同时又不影响系统的响应率&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JVM内存最大化利用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;线程阻塞情况最小化&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tomcat容器内的优化&quot;&gt;Tomcat容器内的优化&lt;/h4&gt;
&lt;p&gt;前面我们对Tomcat启动时的命令进行了优化，增加了系统的JVM可使用数、垃圾回收效率与线程阻塞情况、增加了系统响应效率等还有一个很重要的指标，我们没有去做优化，就是吞吐量。&lt;/p&gt;

&lt;p&gt;还记得我们在第三天的学习中说的，这个系统本身可以处理1000，你没有优化和配置导致它默认只能处理25。因此下面我们来看Tomcat容器内的优化。&lt;/p&gt;

&lt;p&gt;打开tomcat安装目录\conf\server.xml文件，定位到这一行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这一行就是我们的tomcat容器性能参数设置的地方，它一般都会有一个默认值，这些默认值是远远不够我们的使用的，我们来看经过更改后的这一段的配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
          URIEncoding=&quot;UTF-8&quot;  minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;
          enableLookups=&quot;false&quot; disableUploadTimeout=&quot;true&quot; connectionTimeout=&quot;20000&quot;
          acceptCount=&quot;300&quot;  maxThreads=&quot;300&quot; maxProcessors=&quot;1000&quot; minProcessors=&quot;5&quot;
          useURIValidationHack=&quot;false&quot;
                                               compression=&quot;on&quot; compressionMinSize=&quot;2048&quot;
                                               compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;
               redirectPort=&quot;8443&quot;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;好大一陀唉。。。。。。&lt;/p&gt;

&lt;p&gt;没关系，一个个来解释&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URIEncoding=”UTF-8”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使得tomcat可以解析含有中文名的文件的url，真方便，不像apache里还有搞个mod_encoding，还要手工编译&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;maxSpareThreads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maxSpareThreads 的意思就是如果空闲状态的线程数多于设置的数目，则将这些线程中止，减少这个池中的线程总数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;minSpareThreads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最小备用线程数，tomcat启动时的初始化的线程数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enableLookups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个功效和Apache中的HostnameLookups一样，设为关闭。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;connectionTimeout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;connectionTimeout为网络连接超时时间毫秒数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;maxThreads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;maxThreads Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数，即最大并发数。&lt;/p&gt;

&lt;p&gt;*acceptCount&lt;/p&gt;

&lt;p&gt;acceptCount是当线程数达到maxThreads后，后续请求会被放入一个等待队列，这个acceptCount是这个队列的大小，如果这个队列也满了，就直接refuse connection&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;maxProcessors与minProcessors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 Java中线程是程序运行时的路径，是在一个程序中与其它控制线程无关的、能够独立运行的代码段。它们共享相同的地址空间。多线程帮助程序员写出CPU最 大利用率的高效程序，使空闲时间保持最低，从而接受更多的请求。&lt;/p&gt;

&lt;p&gt;通常Windows是1000个左右，Linux是2000个左右。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;useURIValidationHack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们来看一下tomcat中的一段源码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;security
        if (connector.getUseURIValidationHack()) {
            String uri = validate(request.getRequestURI());
            if (uri == null) {
                res.setStatus(400);
                res.setMessage(&quot;Invalid URI&quot;);
                throw new IOException(&quot;Invalid URI&quot;);
            } else {
                req.requestURI().setString(uri);
                // Redoing the URI decoding
                req.decodedURI().duplicate(req.requestURI());
                req.getURLDecoder().convert(req.decodedURI(), true);
            }
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到如果把useURIValidationHack设成”false”，可以减少它对一些url的不必要的检查从而减省开销。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enableLookups=”false”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了消除DNS查询对性能的影响我们可以关闭DNS查询，方式是修改server.xml文件中的enableLookups参数值。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;disableUploadTimeout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类似于Apache中的keeyalive一样&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;给Tomcat配置gzip压缩(HTTP压缩)功能&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compression=&quot;on&quot; compressionMinSize=&quot;2048&quot;             
compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求网页后，从服务器端将网页文件压缩，再下载到客户端，由客户端的浏览器负责解压缩并浏览。相对于普通的浏览过程HTML,CSS,Javascript , Text ，它可以节省40%左右的流量。更为重要的是，它可以对动态生成的，包括CGI、PHP , JSP , ASP , Servlet,SHTML等输出的网页也能进行压缩，压缩效率惊人。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;compression=”on” 打开压缩功能&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;compressionMinSize=”2048” 启用压缩的输出内容大小，这里面默认为2KB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;noCompressionUserAgents=”gozilla, traviata” 对于以下的浏览器，不启用压缩&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;compressableMimeType=”text/html,text/xml”　压缩类型&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后不要忘了把8443端口的地方也加上同样的配置，因为如果我们走https协议的话，我们将会用到8443端口这个段的配置，对吧？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!--enable tomcat ssl--&amp;gt;
    &amp;lt;Connector port=&quot;8443&quot; protocol=&quot;HTTP/1.1&quot;
               URIEncoding=&quot;UTF-8&quot;  minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;
          enableLookups=&quot;false&quot; disableUploadTimeout=&quot;true&quot; connectionTimeout=&quot;20000&quot;
          acceptCount=&quot;300&quot;  maxThreads=&quot;300&quot; maxProcessors=&quot;1000&quot; minProcessors=&quot;5&quot;
          useURIValidationHack=&quot;false&quot;
                    compression=&quot;on&quot; compressionMinSize=&quot;2048&quot;
                    compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;
                SSLEnabled=&quot;true&quot;
           scheme=&quot;https&quot; secure=&quot;true&quot;
           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;
           keystoreFile=&quot;d:/tomcat2/conf/shnlap93.jks&quot; keystorePass=&quot;aaaaaa&quot;
      /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;好了，所有的Tomcat优化的地方都加上了。结合第三天中的Apache的性能优化，我们这个架构可以“飞奔”起来了，当然这边把有提及任何关于数据库优化的步骤，但仅凭这两步，我们的系统已经有了很大的提升。&lt;/p&gt;

&lt;p&gt;举个真实的例子：上一个项目，经过4轮performance testing，第一轮进行了问题的定位，第二轮就是进行了apache+tomcat/weblogic的优化，第三轮是做集群优化，第四轮是sql与codes的优化。&lt;/p&gt;

&lt;p&gt;在到达第二轮时，我们的性能已经提升了多少倍呢？我们来看一个loaderrunner的截图吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/tomcat-optimize/4.jpg&quot; alt=&quot;tomcat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左边第一列是第一轮没有经过任何调优的压力测试报告。&lt;/p&gt;

&lt;p&gt;右边这一列是经过了apache优化，tomcat优化后得到的压力测试报告。&lt;/p&gt;

&lt;p&gt;大家看看，这就提高了多少倍？这还只是在没有改动代码的情况下得到的改善，现在明白了好好的调优一个apache和tomcat其实是多么的重要了？如果加上后面的代码、SQL的调优、数据库的调优。。。。。。所以我在上一个工程中有单笔交易性能（无论是吞吐量、响应时间）提高了80倍这样的极端例子的存在。&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Sep 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/09/12/tomcat-optimize.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/09/12/tomcat-optimize.html</guid>
        
        <category>tomcat</category>
        
        <category>优化</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>tomcat + memcached + nginx 实现session共享</title>
        <description>&lt;p&gt;这里重点强调如何实现linux服务器上 服务器session共享，软件安装不再赘述。&lt;/p&gt;

&lt;p&gt;首先我们需要对 cookie 和session的工作机制非常了解，如果不了解其中的原理，就算配置成功，也毫无意义。换了工作换了环境，重新配置起来仍然需要重头来过，事倍功半。&lt;/p&gt;

&lt;p&gt;cookie是怎样工作的？&lt;/p&gt;

&lt;p&gt;例如，我们创建了一个名字为login的Cookie来包含访问者的信息，创建Cookie时，服务器端的Header如下面所示，这里假设访问者的注册名是“Michael Jordan”，同时还对所创建的Cookie的属性如path、domain、expires等进行了指定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-Cookie:login=Michael Jordan;path=/;domain=msn.com; 
expires=Monday,01-Mar-99 00:00:01 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这个Header会自动在浏览器端计算机的Cookie文件中添加一条记录。浏览器将变量名为“login”的Cookie赋值为“Michael Jordon”。注意，在实际传递过程中这个Cookie的值是经过了URLEncode方法的URL编码操作的。&lt;/p&gt;

&lt;p&gt;这个含有Cookie值的HTTP Header被保存到浏览器的Cookie文件后，Header就通知浏览器将Cookie通过请求以忽略路径的方式返回到服务器，完成浏览器的认证操作。&lt;/p&gt;

&lt;p&gt;此外，我们使用了Cookie的一些属性来限定该Cookie的使用。例如Domain属性能够在浏览器端对Cookie发送进行限定，具体到上面的例子，该Cookie只能传到指定的服务器上，而决不会跑到其他的如www.hp.com的Web站点上去。Expires属性则指定了该Cookie保存的时间期限，例如上面的Cookie在浏览器上只保存到1999年3月1日1秒。&lt;/p&gt;

&lt;p&gt;当然，如果浏览器上Cookie太多，超过了系统所允许的范围，浏览器将自动对它进行删除。至于属性Path，用来指定Cookie将被发送到服务器的哪一个目录路径下。&lt;/p&gt;

&lt;p&gt;说明：浏览器创建了一个Cookie后，对于每一个针对该网站的请求，都会在Header中带着这个Cookie；不过，对于其他网站的请求Cookie是绝对不会跟着发送的。而且浏览器会这样一直发送，直到Cookie过期为止。&lt;/p&gt;

&lt;h5 id=&quot;session又是如何工作的&quot;&gt;session又是如何工作的？&lt;/h5&gt;

&lt;p&gt;由于http是无状态的协议，你访问了页面A，然后在访问B，http无法确定这2个访问来自一个人，因此要用cookie或session来跟踪用户，根据授权和用户身份来显示不同的页面。比如用户A登陆了，那么能看到自己的个人信息，而B没登陆，无法看到个人信息。还有A可能在购物，把商品放入购物车，此时B也有这个过程，你无法确定A，B的身份和购物信息，所以需要一个session ID来维持这个过程。&lt;/p&gt;

&lt;p&gt;cookie是服务器发给客户端，并且保持在客户端的一个文件，里面包含了用户的访问信息（账户密码等），可以手动删除或设置有效期，在下次访问的时候，会返给服务器。注意：cookie可以被禁用，所以要想其他办法，这就是session。比如：你去商场购物，商场会给你办一张会员卡，下次你来出示该卡，会有打折优惠。该卡可以自己保存（cookie），或是商场代为保管，由于会员太多，个人需要保存卡号信息（session ID)。&lt;/p&gt;

&lt;h5 id=&quot;为什么要持久化session&quot;&gt;为什么要持久化SESSION？&lt;/h5&gt;

&lt;p&gt;在客户端每个用户的Session对象存在Servlet容器中，如果Tomcat服务器重起/当机的话该session就会丢失，而客户端的操作应为session的丢失而造成数据丢失，而且当前用户访问量巨大，每个用户的Session里存放大量的数据的话，那么就很占用服务器大量的内存，从而是服务器的性能受到影响。&lt;/p&gt;

&lt;h5 id=&quot;番外篇&quot;&gt;番外篇&lt;/h5&gt;

&lt;p&gt;session 是非常重要的数据，非常宝贵。但是session同样也是缺憾满身，在大规模集群服务器中，最好使用其他替代方案。比如淘宝网。&lt;/p&gt;

&lt;h5 id=&quot;对nginx的了解&quot;&gt;对nginx的了解？&lt;/h5&gt;

&lt;p&gt;nginx 是一款非常优秀的服务器软件，其优秀程度这里不过多赘述。&lt;/p&gt;

&lt;h4 id=&quot;进入正题&quot;&gt;进入正题&lt;/h4&gt;

&lt;p&gt;session 实现共享的方法分为多种&lt;/p&gt;

&lt;p&gt;对于WEB应用集群的技术实现而言，最大的难点就是如何能在集群中的多个节点之间保持数据的一致性，会话（Session）信息是这些数据中最重要的一块。要实现这一点，大体上有两种方式，一种是把所有Session数据放到一台服务器上或者数据库中，集群中的所有节点通过访问这台Session服务器来获取数据；另一种就是在集群中的所有节点间进行Session数据的同步拷贝，任何一个节点均保存了所有的Session数据。&lt;/p&gt;

&lt;h6 id=&quot;一使用tomcat自身集群特性完成session共享&quot;&gt;一、使用tomcat自身集群特性完成session共享&lt;/h6&gt;

&lt;p&gt;这种方式是使用tomcat自身广播的特点来进行session同步拷贝，优点是简单，缺点是一旦tomcat集群数量过多，很容易引发广播风暴。&lt;/p&gt;

&lt;p&gt;详细配置 请参照 博客 &lt;a href=&quot;http://zyycaesar.iteye.com/blog/296606&quot;&gt;http://zyycaesar.iteye.com/blog/296606&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;粗略配置如下 tomcat/server.xml&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;
        channelSendOptions=&quot;8&quot;&amp;gt;
  &amp;lt;Manager className=&quot;org.apache.catalina.ha.session.DeltaManager&quot;
    expireSessionsOnShutdown=&quot;false&quot;
    notifyListenersOnReplication=&quot;true&quot;/&amp;gt;
  &amp;lt;Channel className=&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&amp;gt;
     &amp;lt;Membership className=&quot;org.apache.catalina.tribes.membership.McastService&quot;
      address=&quot;224.0.0.0&quot;
      port=&quot;45564&quot;
      frequency=&quot;500&quot;
      dropTime=&quot;3000&quot;/&amp;gt;
     &amp;lt;Receiver className=&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;
       address=&quot;192.168.0.223&quot;
       port=&quot;4001&quot;
       autoBind=&quot;100&quot;
       selectorTimeout=&quot;5000&quot;
       maxThreads=&quot;6&quot;/&amp;gt;
     &amp;lt;Sender className=&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&amp;gt;
  &amp;lt;Transport className=&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;/&amp;gt;
     &amp;lt;/Sender&amp;gt;
     &amp;lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;/&amp;gt;
     &amp;lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor&quot;/&amp;gt;
  &amp;lt;/Channel&amp;gt;
  &amp;lt;Valve className=&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;
  filter=&quot;.*\.gif;.*\.js;.*\.jpg;.*\.png;.*\.htm;.*\.html;.*\.css;.*\.txt;&quot;/&amp;gt;
  &amp;lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;/&amp;gt;
  &amp;lt;ClusterListener className=&quot;org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener&quot;/&amp;gt;
  &amp;lt;ClusterListener className=&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;/&amp;gt;
&amp;lt;/Cluster&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;二使用数据库持久化session&quot;&gt;二、使用数据库持久化session&lt;/h6&gt;

&lt;p&gt;这里又分为物理数据库和内存数据库物理数据库备份session，由于其性能的原因，这里不作介绍。&lt;/p&gt;

&lt;p&gt;内存数据库 可以暂分为 redis 和 memcached&lt;/p&gt;

&lt;p&gt;这里我们只介绍memcached，多个tomcat各种序列化策略配置如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;java默认序列化tomcat配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;conf/context.xml添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;
     memcachedNodes=&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;     
  lockingMode=&quot;auto&quot;
  sticky=&quot;false&quot; 
  requestUriIgnorePattern= &quot;.*\.(png|gif|jpg|css|js)$&quot;    
  sessionBackupAsync= &quot;false&quot;   
  sessionBackupTimeout= &quot;100&quot;      
  transcoderFactoryClass=&quot;de.javakaffee.web.msm.JavaSerializationTranscoderFactory&quot;    
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;lib增加jar包：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spymemcached-2.10.3.jar
memcached-session-manager-1.7.0.jar
memcached-session-manager-tc7-1.7.0.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;javolution序列化tomcat配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;conf/context.xml添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;
     memcachedNodes=&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;   
  lockingMode=&quot;auto&quot;
  sticky=&quot;false&quot; 
  requestUriIgnorePattern= &quot;.*\.(png|gif|jpg|css|js)$&quot;    
  sessionBackupAsync= &quot;false&quot;   
  sessionBackupTimeout= &quot;100&quot;  
  copyCollectionsForSerialization=&quot;true&quot;   
  transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;    
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;lib增加jar包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msm-javolution-serializer-cglib-1.3.0.jar
msm-javolution-serializer-jodatime-1.3.0.jar
spymemcached-2.10.3.jar
javolution-5.4.3.1.jar
msm-javolution-serializer-1.7.0.jar
memcached-session-manager-1.7.0.jar
memcached-session-manager-tc7-1.7.0.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;xstream序列化tomcat配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;conf/context.xml添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;
     memcachedNodes=&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;   
  lockingMode=&quot;auto&quot;
  sticky=&quot;false&quot; 
  requestUriIgnorePattern= &quot;.*\.(png|gif|jpg|css|js)$&quot;    
  sessionBackupAsync= &quot;false&quot;   
  sessionBackupTimeout= &quot;100&quot;
  transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.xstream.XStreamTranscoderFactory&quot;    
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;lib增加jar包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmlpull-1.1.3.1.jar
xpp3_min-1.1.4c.jar
xstream-1.4.6.jar
msm-xstream-serializer-1.7.0.jar
spymemcached-2.10.3.jar
memcached-session-manager-1.7.0.jar
memcached-session-manager-tc7-1.7.0.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;flexjson序列化tomcat配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;conf/context.xml添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;
     memcachedNodes=&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;     
  lockingMode=&quot;auto&quot;
  sticky=&quot;false&quot; 
  requestUriIgnorePattern= &quot;.*\.(png|gif|jpg|css|js)$&quot;    
  sessionBackupAsync= &quot;false&quot;   
  sessionBackupTimeout= &quot;100&quot;      
  transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.json.JSONTranscoderFactory&quot;    
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;lib增加jar包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flexjson-3.1.jar
msm-flexjson-serializer-1.7.0.jar
spymemcached-2.10.3.jar
memcached-session-manager-1.7.0.jar
memcached-session-manager-tc7-1.7.0.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;kryo序列化tomcat配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;conf/context.xml添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;
     memcachedNodes=&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;   
  lockingMode=&quot;auto&quot;
  sticky=&quot;false&quot; 
  requestUriIgnorePattern= &quot;.*\.(png|gif|jpg|css|js)$&quot;    
  sessionBackupAsync= &quot;false&quot;   
  sessionBackupTimeout= &quot;100&quot;    
  copyCollectionsForSerialization=&quot;true&quot;   
  transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;    
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;lib增加jar包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kryo-1.04.jar
minlog-1.2.jar
asm-3.2.jar
reflectasm-1.01.jar
kryo-serializers-0.11.jar
msm-kryo-serializer-1.7.0.jar
spymemcached-2.10.3.jar
memcached-session-manager-1.7.0.jar
memcached-session-manager-tc7-1.7.0.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;官网介绍说 使用kryo 序列化tomcat的效率最高 所以这里只介绍kryo序列化。具体效率对比，还需要进一步验证。&lt;/p&gt;

&lt;p&gt;修改tomcat/context.xml文件 新增如下代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;
    memcachedNodes=&quot;n1:192.168.0.216:11211&quot; 
    sticky=&quot;false&quot;
    storageKeyPrefix=&quot;context&quot;
    sessionBackupAsync=&quot;false&quot;
    lockingMode=&quot;uriPattern:/path1|/path2&quot;
    requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;
    transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Manager 各参数说明：&lt;/p&gt;

&lt;p&gt;className必选项，可配置为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;de.javakaffee.web.msm.MemcachedBackupSessionManager和de.javakaffee.web.msm.DummyMemcachedBackupSessionManager。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中DummyMemcachedBackupSessionManager可用于测试环境，不需要真实存在memcached。&lt;/p&gt;

&lt;p&gt;memcachedNodes必选项，memcached的节点信息，格式如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;memcachedNodes=&quot;n1:app01:11211,n2:app02:11211&quot;。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;failoverNodes&lt;/p&gt;

&lt;p&gt;可选项，不能使用在non-sticky sessions模式。故障转移配置节点，多个使用空格或逗号分开，配置某个节点为备份节点，当其他节点都不可用时才会存储到备份节点，官方建议配置为和tomcat同服务器的节点。&lt;/p&gt;

&lt;p&gt;理由如下:&lt;/p&gt;

&lt;p&gt;假如有两台服务器m1,m2，其中m1部署tomcat和memcached节点n1，m2部署memcached节点n2。&lt;/p&gt;

&lt;p&gt;如果配置tomcat的failoverNodes值为n2或者不配置，则当服务器m1挂掉后n1和tomcat中保存的session会丢失，而n2中未保存或者只保存了部分session，这就造成部分用户状态丢失。&lt;/p&gt;

&lt;p&gt;如果配置tomcat的failoverNodes值为n1，则当m1挂掉后因为n2中保存了所有的session，所以重启tomcat的时候用户状态不会丢失。&lt;/p&gt;

&lt;p&gt;为什么n2中保存了所有的session? 因为failoverNodes配置的值是n1，只有当n2节点不可用时才会把session存储到n1，所以这个时候n1中是没有保存任何session的。&lt;/p&gt;

&lt;p&gt;username可选项，SASL的用户名，如果节点保护membase的bucket uri。&lt;/p&gt;

&lt;p&gt;password可选项，和username搭配使用。&lt;/p&gt;

&lt;p&gt;memcachedProtocol可选项，默认text，memcached使用的协议，可选值：text，binary。&lt;/p&gt;

&lt;p&gt;sticky可选项，默认true，制定是否使用粘性session模式。&lt;/p&gt;

&lt;p&gt;说道sticky 需要简单介绍&lt;/p&gt;

&lt;h6 id=&quot;sticky-模式&quot;&gt;Sticky 模式：&lt;/h6&gt;

&lt;p&gt;tomcat session 为 主session， memcached 为备 session。Request请求到来时， 从memcached加载备 session到 tomcat (仅当tomcat jvmroute发生变化时，否则直接取tomcat session)；Request请求结束时，将tomcat session更新至memcached，以达到主备同步之目的。&lt;/p&gt;

&lt;p&gt;Non-Sticky模式：tomcat session 为 中转session， memcached1 为主 sessionmemcached 2 为备session。Request请求到来时，从memcached 2加载备 session到 tomcat，（当 容器 中还是没有session 则从memcached1加载主 session 到 tomcat， 这种情况是只有一个memcached节点，或者有memcached1 出错时），Request请求结束时，将tomcat session更新至主memcached1和备memcached2，并且清除tomcat session 。以达到主备同步之目的。&lt;/p&gt;

&lt;p&gt;多台tomcat集群时 需要选择Non-Sticky模式，即sticky=”false”&lt;/p&gt;

&lt;p&gt;需要使用到得jar 列表如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;couchbase-client-1.2.2.jar
kryo-1.03.jar
kryo-serializers-0.10.jar
memcached-2.5.jar
memcached-session-manager-1.6.5.jar
memcached-session-manager-tc7-1.6.5.jar
minlog-1.2.jar
msm-kryo-serializer-1.6.5.jar
reflectasm-0.9.jar
spymemcached-2.10.2.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你查看过源码，你就会发现，如果当你调试不成功，session不共享，一般都是 memcached-session-manager-1.6.5.jar、memcached-session-manager-tc7-1.6.5.jar、msm-kryo-serializer-1.6.5.jar这三个jar包出问题。所以版本也很重要。&lt;/p&gt;

&lt;p&gt;服务器之间的时间戳一致也非常重要，因为时间不一致将直接导致session过期。&lt;/p&gt;

&lt;p&gt;memcached 的启动所有者最好设置为nobody&lt;/p&gt;

&lt;p&gt;本博文是经过实际电商项目验证，实际登录验证，验证过程中不断关停一些tomcat，所以本博文可作为真实参考。&lt;/p&gt;

&lt;p&gt;验证项目为大红袜全球购。&lt;/p&gt;

&lt;p&gt;lockingMode可选值，默认none，只对non-sticky有效。&lt;/p&gt;

&lt;p&gt;requestUriIgnorePattern可选值，制定忽略那些请求的session操作，一般制定静态资源如css,js一类的。&lt;/p&gt;

&lt;p&gt;sessionBackupAsync可选值，默认true，是否异步的方式存储到memcached。&lt;/p&gt;

&lt;p&gt;backupThreadCount可选项，默认是cpu核心数，异步存储session的线程数。&lt;/p&gt;

&lt;p&gt;sessionBackupTimeout可选项，默认100毫秒，异步存储session的超时时间。&lt;/p&gt;

&lt;p&gt;operationTimeout可选项，默认1000毫秒，memcached的操作超时时间。&lt;/p&gt;

&lt;p&gt;storageKeyPrefix可选值，默认值webappVersion，存储到memcached的前缀，主要是为了区分多个webapp共享session的情况。可选值：静态字符串、host、context、webappVersion，多个使用逗号分割。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sessionAttributeFilter可选值，通过正则表达式确定那些session中的属性应该被存储到memcached。例子如：sessionAttributeFilter=”^(userName&lt;/td&gt;
      &lt;td&gt;sessionHistory)$”。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;transcoderFactoryClass可选值，默认值de.javakaffee.web.msm.JavaSerializationTranscoderFactory，制定序列化和反序列化数据到memcached的工厂类。&lt;/p&gt;

&lt;h5 id=&quot;使用-filter-方法存储&quot;&gt;使用 filter 方法存储&lt;/h5&gt;

&lt;p&gt;这种方法比较推荐，因为它的服务器使用范围比较多，不仅限于 tomcat ，而且实现的原理比较简单容易控制。&lt;/p&gt;

&lt;p&gt;可以使用 memcached-session-filter&lt;/p&gt;

&lt;p&gt;官方网址：&lt;a href=&quot;http://code.google.com/p/memcached-session-filter/&quot;&gt;http://code.google.com/p/memcached-session-filter/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;官方介绍：解决集群环境下java web容器session共享,使用filter拦截器和memcached实现。在tomcat 6和websphere 8测试通过，现网并发2000，日PV量1100万。&lt;/p&gt;

&lt;p&gt;暂不支持session event包括create destory 和 attribute change东西很不错，体积很小，不过这个东东要和 spring 一起使用，而且要求存储到 memcached 的对象要实现 java 的序列化接口大家也知道，java 本身的序列化性能也很一般。&lt;/p&gt;

&lt;p&gt;将其简单扩展，就可以不再依赖 spring ，并且利用 javolution 实现序列化，缓存的对象不再有限制。&lt;/p&gt;

</description>
        <pubDate>Fri, 11 Sep 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/09/11/tomcat-nginx-memcached-session.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/09/11/tomcat-nginx-memcached-session.html</guid>
        
        <category>tomcat</category>
        
        <category>memcached</category>
        
        <category>nginx</category>
        
        <category>session</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Linux安装mysql-源码安装</title>
        <description>&lt;p&gt;1.假设已经有mysql-5.5.10.tar.gz以及cmake-2.8.4.tar.gz两个源文件&lt;/p&gt;

&lt;p&gt;(1)先安装cmake（mysql5.5以后是通过cmake来编译的）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 local]#tar -zxv -f cmake-2.8.4.tar.gz
[root@ rhel5 local]#cd cmake-2.8.4
[root@ rhel5 cmake-2.8.4]#./configure
[root@ rhel5 cmake-2.8.4]#make
[root@ rhel5 cmake-2.8.4]#make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2)创建mysql的安装目录及数据库存放目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]#mkdir -p /usr/local/mysql                 //安装mysql 
[root@ rhel5~]#mkdir -p /usr/local/mysql/data            //存放数据库
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(3)创建mysql用户及用户组&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]groupadd mysql
[root@ rhel5~]useradd -r -g mysql mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(4)安装mysql&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 local]#tar -zxv -f mysql-5.5.10.tar.gz
[root@ rhel5 local]#cd mysql-5.5.10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 mysql-5.5.10]#cmake . 
-DCMAKE_INSTALL_PREFIX=/usr/local/mysql
-DMYSQL_DATADIR=/usr/local/mysql/data
-DDEFAULT_CHARSET=utf8
-DDEFAULT_COLLATION=utf8_general_ci 
-DEXTRA_CHARSETS=all 
-DENABLED_LOCAL_INFILE=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 mysql-5.5.10]#make
[root@ rhel5 mysql-5.5.10]#make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;-DCMAKE_INSTALL_PREFIX=/usr/local/mysql        //安装目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-DINSTALL_DATADIR=/usr/local/mysql/data         //数据库存放目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-DDEFAULT_CHARSET=utf8                    　　　　//使用utf8字符&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-DDEFAULT_COLLATION=utf8_general_ci            //校验字符&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-DEXTRA_CHARSETS=all                        　　　　//安装所有扩展字符集&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-DENABLED_LOCAL_INFILE=1                    　　  //允许从本地导入数据&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意事项：&lt;/p&gt;

&lt;p&gt;重新编译时，需要清除旧的对象文件和缓存信息。&lt;/p&gt;

&lt;p&gt;make clean&lt;/p&gt;

&lt;p&gt;rm -f CMakeCache.txt&lt;/p&gt;

&lt;p&gt;rm -rf /etc/my.cnf&lt;/p&gt;

&lt;p&gt;2.配置&lt;/p&gt;

&lt;p&gt;(1)设置目录权限&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]# cd /usr/local/mysql
[root@ rhel5 mysql]# chown -R root:mysql .　//把当前目录中所有文件的所有者所有者设为root，所属组为mysql
[root@ rhel5 mysql]# chown -R mysql:mysql data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 mysql]# cp support-files/my-medium.cnf /etc/my.cnf　//将mysql的启动服务添加到系统服务中
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(3)创建系统数据库的表&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 mysql]# cd /usr/local/mysql
[root@ rhel5 mysql]# scripts/mysql_install_db --user=mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(4)设置环境变量&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]# vi /root/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在PATH=$PATH:$HOME/bin添加参数为：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]#source /root/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(5)手动启动mysql&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]# cd /usr/local/mysql
[root@ rhel5 mysql]# ./bin/mysqld_safe --user=mysql &amp;amp; 　 //启动MySQL，但不能停止
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动日志写在此文件下：&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/mysql/data/localhost.err&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;关闭MySQL服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 mysql]# mysqladmin -u root -p shutdown　　//这里MySQL的root用户还没有配置密码，所以为空值。需要输入密码时，直接点回车键即可。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(6)另一种简单的启动mysql的方法(mysql已经被添加到系统服务中)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]# service mysql.server start  
[root@ rhel5~]# service mysql.server stop
[root@ rhel5~]# service mysql.server restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果上述命令出现：mysql.server 未识别的服务&lt;/p&gt;

&lt;p&gt;则可能mysql还没添加到系统服务中，下面用另一种方法添加：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5 mysql]# cp support-files/mysql.server  /etc/init.d/mysql　//将mysql的启动服务添加到系统服务中
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：主要是将mysql.server拷贝到/etc/init.d中，命名为mysql。在有的系统中，mysql.server在/usr/local/mysql/share/mysql/mysql.server中，而本系统中，mysql.server在/usr/local/mysql/support-files/mysql.server中。&lt;/p&gt;

&lt;p&gt;然后再用#service mysql start 来启动mysql即可。&lt;/p&gt;

&lt;p&gt;(7)修改MySQL的root用户的密码以及打开远程连接&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]# mysql -u root mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysqlGRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;%&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;为&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;添加远程连接的能力。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xxxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重新登录：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;若还不能进行远程连接，则关闭防火墙&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ rhel5~]# /etc/rc.d/init.d/iptables stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：如果不能远程连接，出现错误mysql error number 1130，则加入下面语句试试：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'******'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 01 Sep 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//database/2015/09/01/linux-mysql.html</link>
        <guid isPermaLink="true">http://localhost:4000//database/2015/09/01/linux-mysql.html</guid>
        
        <category>MySQL</category>
        
        
        <category>Database</category>
        
      </item>
    
      <item>
        <title>memcached源码安装、错误处理及启动参数</title>
        <description>&lt;p&gt;memcached服务安装：&lt;/p&gt;

&lt;p&gt;源码包：memcached-1.4.21.tar.gz&lt;/p&gt;

&lt;p&gt;依赖包：libevent-2.0.20-stable.tar.gz&lt;/p&gt;

&lt;p&gt;libevent是memcached的基本库&lt;/p&gt;

&lt;p&gt;安装首先编译安装libevent，要求为安装三部曲&lt;/p&gt;

&lt;p&gt;安装memcached在configure时，若需要安装多个memcached，增加路径参数即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure –prefix=/usr/local/mem1/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动方式：&lt;/p&gt;

&lt;p&gt;在bin目录下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./memcached -d -c 4096 -m 512 -u root -p 11212
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;-d表示以后台守护进程方式启动&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-c表示最大连接数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-m表示使用内存大小，单位为M&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-u表示以root用户启动&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-p表示监听端口号&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装memcache时，需要建立文件索引或者说文件连接（link），类似windows下的快捷方式&lt;/p&gt;

&lt;p&gt;启动服务时出现 &lt;strong&gt;error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;解决办法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whereis libevent-2.0.so.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;libevent-2.0.so.5: /usr/local/lib/libevent-2.0.so.5&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldd /usr/local/bin/memcached （ldd指令不熟悉的去查看下）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;libevent-2.0.so.5 =&amp;gt; not found （没有找到该文件）&lt;/p&gt;

&lt;p&gt;libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00002b83fce0e000)&lt;/p&gt;

&lt;p&gt;libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00002b83fd029000)&lt;/p&gt;

&lt;p&gt;librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00002b83fd381000)&lt;/p&gt;

&lt;p&gt;/lib64/ld-linux-x86-64.so.2 (0x00002b83fc9b0000)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LD_DEBUG=libs ./memcached -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;LD_DEBUG=libs /usr/local/mem1/bin/memcached -v
找到默认路径 /usr/lib/&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ln -s /usr/lib/libevent-2.0.so.5 /usr/lib64/libevent-2.0.so.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ldd /usr/local/bin/memcached
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;libevent-2.0.so.5 =&amp;gt; /usr/lib64/libevent-2.0.so.5 (0x00002b83fcbcd000)&lt;/p&gt;

&lt;p&gt;libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00002b83fce0e000)&lt;/p&gt;

&lt;p&gt;libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00002b83fd029000)&lt;/p&gt;

&lt;p&gt;librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00002b83fd381000)&lt;/p&gt;

&lt;p&gt;/lib64/ld-linux-x86-64.so.2 (0x00002b83fc9b0000)&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Aug 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/08/18/linux-memcached.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/08/18/linux-memcached.html</guid>
        
        <category>memcached</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>CPU使用率的计算方法</title>
        <description>&lt;p&gt;在Linux系统中，可以用/proc/stat文件来计算cpu的利用率。这个文件包含了所有CPU活动的信息，该文件中的所有值都是从系统启动开始累计到当前时刻。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /proc/stat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;cpu 65376847 362756 2405159 10834971593 3765180 93399 2395097 0&lt;/p&gt;

&lt;p&gt;cpu0 7680302 5263 111909 1355640955 47680 0 185343 0&lt;/p&gt;

&lt;p&gt;cpu1 6527638 2261 327795 1356540189 249151 1 24242 0&lt;/p&gt;

&lt;p&gt;cpu2 6239465 47114 200809 1354709532 2153662 3610 317002 0&lt;/p&gt;

&lt;p&gt;cpu3 7009912 36126 257576 1356116663 162851 1068 87068 0&lt;/p&gt;

&lt;p&gt;cpu4 6028713 1692 197911 1356919175 300788 6821 216076 0&lt;/p&gt;

&lt;p&gt;cpu5 7110575 1479 124474 1356297947 92620 4248 39901 0&lt;/p&gt;

&lt;p&gt;cpu6 7206763 241427 247384 1355030525 691206 11642 242214 0&lt;/p&gt;

&lt;p&gt;cpu7 17573475 27390 937298 1343716603 67218 66006 1283248 0&lt;/p&gt;

&lt;p&gt;intr 2466653411 753885765 3 0 4 4 0 0 0 1 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148466005 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1553671397 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10630155 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 0 0 0 0&lt;/p&gt;

&lt;p&gt;ctxt 2905526438&lt;/p&gt;

&lt;p&gt;btime 1260187150&lt;/p&gt;

&lt;p&gt;processes 4266007&lt;/p&gt;

&lt;p&gt;procs_running 5&lt;/p&gt;

&lt;p&gt;procs_blocked 0&lt;/p&gt;

&lt;p&gt;输出解释&lt;/p&gt;

&lt;p&gt;CPU 以及CPU0、CPU1、CPU2、CPU3、CPU4、CPU5、CPU6、每行的每个参数意思（以第一行为例）为：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;参数&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;user (65376847)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;从系统启动开始累计到当前时刻，用户态的CPU时间（单位：jiffies） ，不包含 nice值为负进程。1jiffies=0.01秒&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nice (362756)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;从系统启动开始累计到当前时刻，nice值为负的进程所占用的CPU时间（单位：jiffies）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;system (2405159)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;从系统启动开始累计到当前时刻，核心时间（单位：jiffies）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;idle (10834971593)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;从系统启动开始累计到当前时刻，除硬盘IO等待时间以外其它等待时间（单位：jiffies）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;iowait (3765180)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;从系统启动开始累计到当前时刻，硬盘IO等待时间（单位：jiffies）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;irq (93399)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;从系统启动开始累计到当前时刻，硬中断时间（单位：jiffies）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;softirq (2395097)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;从系统启动开始累计到当前时刻，软中断时间（单位：jiffies）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CPU时间=user+system+nice+idle+iowait+irq+softirq&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“intr”这行给出中断的信息，第一个为自系统启动以来，发生的所有的中断的次数；然后每个数对应一个特定的中断自系统启动以来所发生的次数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“ctxt”给出了自系统启动以来CPU发生的上下文交换的次数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“btime”给出了从系统启动到现在为止的时间，单位为秒。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“processes (total_forks) 自系统启动以来所创建的任务的个数目。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“procs_running”：当前运行队列的任务的数目。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“procs_blocked”：当前被阻塞的任务的数目。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么CPU利用率可以使用以下两个方法。先取两个采样点，然后计算其差值：&lt;/p&gt;

&lt;p&gt;cpu usage=(idle2-idle1)/(cpu2-cpu1)*100&lt;/p&gt;

&lt;p&gt;cpu usage=[(user_2 +sys_2+nice_2) – (user_1 + sys_1+nice_1)]/(total_2 – total_1)*100&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/07/22/cpu.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/07/22/cpu.html</guid>
        
        <category>CPU</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>LVS三种工作模式脚本及比较</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install ipvsadm
modprobe -l|grep ipvs     ##检查ipvs的模块
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-g 表示使用DR方式，-m表示NAT方式，-i表示tunneling方式。&lt;/p&gt;

&lt;h4 id=&quot;一dr模式&quot;&gt;一、DR模式&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/lvs/dr.jpg&quot; alt=&quot;dr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;堡垒机脚本：&lt;/p&gt;

&lt;p&gt;lvs.sh&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#！/bin/sh&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;VIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.210
 &lt;span class=&quot;nv&quot;&gt;RIP1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.175
 &lt;span class=&quot;nv&quot;&gt;RIP2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.145
 . /etc/rc.d/init.d/functions
         &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
         &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;start LVS of DirectorServer&quot;&lt;/span&gt;
         &lt;span class=&quot;c&quot;&gt;#Set the Virtual IP Address&lt;/span&gt;
         /sbin/ifconfig eth0:1 &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; broadcast &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; netmask 255.255.255.255 up
         /sbin/route add -host &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; dev eth0:1
         &lt;span class=&quot;c&quot;&gt;#Clear IPVS Table&lt;/span&gt;
         /sbin/ipvsadm -C
         &lt;span class=&quot;c&quot;&gt;#Set Lvs&lt;/span&gt;
         /sbin/ipvsadm -A -t &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt;:80 -s rr
         /sbin/ipvsadm -a -t &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt;:80 -r &lt;span class=&quot;nv&quot;&gt;$RIP1&lt;/span&gt;:80 -g
         /sbin/ipvsadm -a -t &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt;:80 -r &lt;span class=&quot;nv&quot;&gt;$RIP2&lt;/span&gt;:80 -g
         &lt;span class=&quot;c&quot;&gt;#Run Lvs&lt;/span&gt;
         /sbin/ipvsadm
         &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
         stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;close LVS Directorserver&quot;&lt;/span&gt;
         /sbin/ipvsadm -C
         /sbin/ifconfig eth0:1 down
         &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage： &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop}&quot;&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
         &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;真实机脚本:&lt;/p&gt;

&lt;p&gt;real-server.sh&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;VIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.210
 &lt;span class=&quot;nv&quot;&gt;BROADCAST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.255  &lt;span class=&quot;c&quot;&gt;#vip's broadcast&lt;/span&gt;
 . /etc/rc.d/init.d/functions
 &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
     &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reparing for Real Server&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_announce
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_ignore
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_announce
        ifconfig lo:0 &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; netmask 255.255.255.255 broadcast &lt;span class=&quot;nv&quot;&gt;$BROADCAST&lt;/span&gt; up
         /sbin/route add -host &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; dev lo:0
         &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
     stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         ifconfig lo:0 down
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_announce
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_ignore
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_announce
         &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: lvs {start|stop}&quot;&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
 &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;二tun模式&quot;&gt;二、TUN模式&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/lvs/tun.jpg&quot; alt=&quot;tun&quot; /&gt;&lt;/p&gt;

&lt;p&gt;堡垒机脚本：&lt;/p&gt;

&lt;p&gt;lvs.sh&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# description: start LVS of Directorserver&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;VIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.25.41（注意，lvs server那台机器2个ip，一个是vip,一个是本身ip例如192.168.25.42）
 &lt;span class=&quot;nv&quot;&gt;RIP1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.25.44
 &lt;span class=&quot;nv&quot;&gt;RIP2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.25.45
 &lt;span class=&quot;c&quot;&gt;#RIPn=192.168.0.n&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;GW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.25.254
 . /etc/rc.d/init.d/functions
 &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
 &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; start LVS of DirectorServer&quot;&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# set the Virtual IP Address&lt;/span&gt;
 /sbin/ifconfig tunl0 &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; broadcast &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; netmask 255.255.255.0 up
 /sbin/route add -host &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; dev tunl0
 &lt;span class=&quot;c&quot;&gt;#Clear IPVS table&lt;/span&gt;
 /sbin/ipvsadm -C
 &lt;span class=&quot;c&quot;&gt;#set LVS&lt;/span&gt;
 /sbin/ipvsadm -A -t &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt;:80 -s rr
 /sbin/ipvsadm -a -t &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt;:80 -r &lt;span class=&quot;nv&quot;&gt;$RIP1&lt;/span&gt;:80 -i
 /sbin/ipvsadm -a -t &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt;:80 -r &lt;span class=&quot;nv&quot;&gt;$RIP2&lt;/span&gt;:80 -i
 &lt;span class=&quot;c&quot;&gt;#/sbin/ipvsadm -a -t $VIP:80 -r $RIP3:80 -i&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#Run LVS&lt;/span&gt;
 /sbin/ipvsadm
 &lt;span class=&quot;c&quot;&gt;#end&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;close LVS Directorserver&quot;&lt;/span&gt;
 ifconfig tunl0 down
 /sbin/ipvsadm -C
 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop}&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
 &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;真实机脚本:&lt;/p&gt;

&lt;p&gt;real-server.sh&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# ghb in 20060812&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# description: Config realserver tunl port and apply arp patch&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;VIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.25.43
 . /etc/rc.d/init.d/functions
 &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
 &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tunl port starting&quot;&lt;/span&gt;
 ifconfig tunl0 &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; netmask 255.255.255.0 broadcast &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; up
 /sbin/route add -host &lt;span class=&quot;nv&quot;&gt;$VIP&lt;/span&gt; dev tunl0
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/tunl0/arp_ignore
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/tunl0/arp_announce
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_ignore
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_announce
 sysctl -p
 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tunl port closing&quot;&lt;/span&gt;
 ifconfig tunl0 down
 &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &amp;gt; /proc/sys/net/ipv4/ip_forward
 &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;0 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce
 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop}&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
 &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;三nat模式&quot;&gt;三、NAT模式&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/lvs/nat.jpg&quot; alt=&quot;nat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;堡垒机脚本：&lt;/p&gt;

&lt;p&gt;lvs.sh&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# description: start LVS of Nat&lt;/span&gt;
 VLAN-IP&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;202.99.59.110
 &lt;span class=&quot;nv&quot;&gt;RIP1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.1.1.2
 &lt;span class=&quot;nv&quot;&gt;RIP2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.1.1.3
 &lt;span class=&quot;c&quot;&gt;#RIPn=10.1.1.n&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;GW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.1.1.1
 . /etc/rc.d/init.d/functions
 &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
 &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; start LVS of NAtServer&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/ip_forward
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/send_redirects
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/default/send_redirects
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/eth0/send_redirects
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/eth1/send_redirects&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;内网卡上的&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#Clear IPVS table&lt;/span&gt;
 /sbin/ipvsadm -C
 &lt;span class=&quot;c&quot;&gt;#set LVS&lt;/span&gt;
 /sbin/ipvsadm -a -t 202.99.59.110:80 -r 10.1.1.2:80 -m -w 1
 /sbin/ipvsadm -a -t 202.99.59.110:80 -r 10.1.1.3:80 -m -w 1
 &lt;span class=&quot;c&quot;&gt;#Run LVS&lt;/span&gt;
 /sbin/ipvsadm
 &lt;span class=&quot;c&quot;&gt;#end&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;close LVS Nat server&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/ip_forward
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/all/send_redirects
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/default/send_redirects
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/eth0/send_redirects
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &amp;gt;/proc/sys/net/ipv4/conf/eth1/send_redirects&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;内网卡上的&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 /sbin/ipvsadm -C
 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop}&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
 &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;VS-Nat 模式的后端机器不需要配置。&lt;/p&gt;

&lt;h5 id=&quot;lvs-三种工作模式的优缺点比较&quot;&gt;LVS 三种工作模式的优缺点比较&lt;/h5&gt;

&lt;h6 id=&quot;一virtual-server-via-natvs-nat&quot;&gt;一、Virtual server via NAT（VS-NAT）&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;集群中的物理服务器可以使用任何支持TCP/IP操作系统，物理服务器可以分配Internet的保留私有地址，只有负载均衡器需要一个合法的IP地址。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;扩展性有限。当服务器节点（普通PC服务器）数据增长到20个或更多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包都需要经过负载均衡器再生。假使TCP包的平均长度是536字节的话，平均包再生延迟时间大约为60us（在Pentium处理器上计算的，采用更快的处理器将使得这个延迟时间变短），负载均衡器的最大容许能力为8.93M/s，假定每台物理服务器的平台容许能力为400K/s来计算，负责均衡器能为22台物理服务器计算。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决办法：&lt;/strong&gt;即使是是负载均衡器成为整个系统的瓶颈，如果是这样也有两种方法来解决它。一种是混合处理，另一种是采用Virtual Server via IP tunneling或Virtual Server via direct routing。如果采用混合处理的方法，将需要许多同属单一的RR DNS域。你采用Virtual Server via IP tunneling或Virtual Server via direct routing以获得更好的可扩展性。也可以嵌套使用负载均衡器，在最前端的是VS-Tunneling或VS-Drouting的负载均衡器，然后后面采用VS-NAT的负载均衡器。&lt;/p&gt;

&lt;h6 id=&quot;二virtual-server-via-ip-tunnelingvs-tun&quot;&gt;二、Virtual server via IP tunneling（VS-TUN）&lt;/h6&gt;

&lt;p&gt;我们发现，许多Internet服务（例如WEB服务器）的请求包很短小，而应答包通常很大。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;负载均衡器只负责将请求包分发给物理服务器，而物理服务器将应答包直接发给用户。所以，负载均衡器能处理很巨大的请求量，这种方式，一台负载均衡能为超过100台的物理服务器服务，负载均衡器不再是系统的瓶颈。使用VS-TUN方式，如果你的负载均衡器拥有100M的全双工网卡的话，就能使得整个Virtual Server能达到1G的吞吐量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不足：&lt;/strong&gt;但是，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，我仅在Linux系统上实现了这个，如果你能让其它操作系统支持，还在探索之中。&lt;/p&gt;

&lt;h6 id=&quot;三virtual-server-via-direct-routingvs-dr&quot;&gt;三、Virtual Server via Direct Routing（VS-DR）&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;和VS－TUN一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器，其中包括：Linux 2.0.36、2.2.9、2.2.10、2.2.12；Solaris 2.5.1、2.6、2.7；FreeBSD 3.1、3.2、3.3；NT4.0无需打补丁；IRIX 6.5；HPUX11等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不足：&lt;/strong&gt;要求负载均衡器的网卡必须与物理网卡在一个物理段上。&lt;/p&gt;

&lt;p&gt;附比较表格图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/lvs/bijiao.jpg&quot; alt=&quot;bijiao&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/05/09/lvs.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/05/09/lvs.html</guid>
        
        <category>LVS</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>MySQL主备模式配置</title>
        <description>&lt;p&gt;背景：&lt;/p&gt;

&lt;p&gt;主数据库IP：192.168.100.2&lt;/p&gt;

&lt;p&gt;从数据库IP：192.168.100.3&lt;/p&gt;

&lt;h4 id=&quot;一修改主数据库的的配置文件&quot;&gt;一、修改主数据库的的配置文件：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]

server-id=1
log-bin=mysqlmaster-bin.log
sync_binlog=1
#注意：下面这个参数需要修改为服务器内存的70%左右
innodb_buffer_pool_size = 512M
innodb_flush_log_at_trx_commit=1
sql_mode=STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_AUTO_VALUE_ON_ZERO
lower_case_table_names=1
log_bin_trust_function_creators=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改之后要重启mysql&lt;/p&gt;

&lt;h4 id=&quot;二修改从数据库的的配置文件server-id配置为大于1的数字即可&quot;&gt;二、修改从数据库的的配置文件（server-id配置为大于1的数字即可）：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]

server-id=2
log-bin=mysqlslave-bin.log
sync_binlog=1
#注意：下面这个参数需要修改为服务器内存的70%左右
innodb_buffer_pool_size = 512M
innodb_flush_log_at_trx_commit=1
sql_mode=STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_AUTO_VALUE_ON_ZERO
lower_case_table_names=1
log_bin_trust_function_creators=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改之后要重启mysql&lt;/p&gt;

&lt;h4 id=&quot;三ssh登录到主数据库&quot;&gt;三、SSH登录到主数据库：&lt;/h4&gt;

&lt;p&gt;（1）在主数据库上创建用于主从复制的账户（192.168.100.3换成你的从数据库IP）：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REPLICATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'repl'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'192.168.100.3'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'repl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（2）主数据库锁表（禁止再插入数据以获取主数据库的的二进制日志坐标）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FLUSH TABLES WITH READ LOCK;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（3）然后克隆一个SSH会话窗口，在这个窗口打开MySQL命令行：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;——————&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;---------------——+—------——-+——------——–+——————+——————-+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Binlog_Do_DB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Binlog_Ignore_DB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executed_Gtid_Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;—————&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;---------------———+——------—-+——------——–+——————+——————-+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysqlmaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;332&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;—————&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;---------------———+—------——-+—------———–+——————+——————-+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这个例子中，二进制日志文件是mysqlmaster-bin.000001，位置是332，记录下这两个值，稍后要用到。&lt;/p&gt;

&lt;p&gt;（4）在主数据库上使用mysqldump命令创建一个数据快照：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#mysqldump
-uroot -p -h127.0.0.1 -P3306 –all-databases –triggers –routines –events &amp;gt;all.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来会提示你输入mysql数据库的root密码，输入完成后，如果当前数据库不大，很快就能导出完成。&lt;/p&gt;

&lt;p&gt;（5）解锁第（2）步主数据的锁表操作：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;四ssh登录到从数据库&quot;&gt;四、SSH登录到从数据库：&lt;/h4&gt;

&lt;p&gt;（1）通过FTP、SFTP或其他方式，将上一步备份的主数据库快照all.sql上传到从数据库某个路径，例如我放在了/home/yimiju/目录下；&lt;/p&gt;

&lt;p&gt;（2）从导入主的快照：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#cd /home/yimiju
#mysql -uroot -p -h127.0.0.1 -P3306 &amp;lt; all.sql 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来会提示你输入mysql数据库的root密码，输入完成后，如果当前数据库不大，很快就能导入完成。&lt;/p&gt;

&lt;p&gt;（3）给从数据库设置复制的主数据库信息（注意修改MASTER_LOG_FILE和MASTER_LOG_POS的值）：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#mysql -uroot -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mysql&amp;gt;``` sql
CHANGE MASTER TO MASTER_HOST=’192.168.100.2’,MASTER_USER=’repl’,MASTER_PASSWORD=’repl’,MASTER_LOG_FILE=’mysqlmaster-bin.000001’,MASTER_LOG_POS=332;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
然后启动从数据库的复制线程：

mysql&amp;gt;``` sql
START slave;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接着查询数据库的slave状态：&lt;/p&gt;

&lt;p&gt;mysql&amp;gt;``` sql
SHOW slave STATUS \G&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
如果下面两个参数都是Yes，则说明主从配置成功！

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Slave_IO_Running: Yes
Slave_SQL_Running: Yes
```&lt;/p&gt;

&lt;p&gt;（4）接下来你可以在主数据库上创建数据库、表、插入数据，然后看从数据库是否同步了这些操作。&lt;/p&gt;

&lt;p&gt;大功告成。&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Apr 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//database/2015/04/03/mysql-master-slave.html</link>
        <guid isPermaLink="true">http://localhost:4000//database/2015/04/03/mysql-master-slave.html</guid>
        
        <category>MySQL</category>
        
        <category>主从</category>
        
        
        <category>Database</category>
        
      </item>
    
      <item>
        <title>Apache tomcat在Linux上安装部署</title>
        <description>&lt;p&gt;tomcat是在java容器中运行的，首先需要下载jdk的Linux包，然后下载Apache tomcat的Linux包，这些在官网都能够下载到。&lt;/p&gt;

&lt;p&gt;jdk和tomcat&lt;/p&gt;

&lt;p&gt;java位置：
ls /data/java/jdk1.7.0_15/
tomcat位置：
ls /data/tomcat/apache-tomcat-7.0.37/&lt;/p&gt;

&lt;p&gt;Java环境&lt;/p&gt;

&lt;p&gt;增加java环境变量：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@cms ~]# tail /etc/profile -n 6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=/data/java/jdk1.7.0_15
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:.
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/apr/lib
export JAVA_HOME PATH CLASSPATH
RUN_AS_USER=root
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可运行tomcat。&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Mar 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/03/12/linux-tomcat.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/03/12/linux-tomcat.html</guid>
        
        <category>tomcat</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>nginx源码安装及安全</title>
        <description>&lt;p&gt;nginx安装版本为nginx-1.6.2.tar.gz，这个版本为目前最新的稳定版。&lt;/p&gt;

&lt;p&gt;安装之前需要安装pcre插件包，插件包版本为：pcre-8.36.tar.gz
还有zlib库和ssl，通过yum安装即可，&lt;code class=&quot;highlighter-rouge&quot;&gt;yum -y install zlib* openssl openssl-devel&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;源码安装遵循安装三部曲：&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure ; make ; make install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装之前需要安装Develepment Tools环境，&lt;code class=&quot;highlighter-rouge&quot;&gt;yum -y groupinstall “Development Tools”&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其中nginx根据不同的用途安装如下插件包：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure --with-http_stub_status_module --with-http_image_filter_module --with-http_ssl_module --with-pcre=/pcre/path --add-module=/purge/path
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第一个是stub监控模块&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二个是图片处理模块，负责图片缩放&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第三个是https模块&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第四个是pcre模块&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第五个是cache purge模块，需要下载，地址在:&lt;a href=&quot;http://labs.frickle.com/files/&quot;&gt;http://labs.frickle.com/files/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;隐藏nginx版本号：&lt;/p&gt;

&lt;p&gt;一、就nginx方面的调整，这里可以直接修改nginx的配置文件来隐藏：
添加server_tokens off；&lt;/p&gt;

&lt;p&gt;二、如果想要把nginx也隐藏掉，需要编辑nginx源码中的src/core/nginx.h头文件nginx修改为Microsoft-IIS版本号改为7，修改后的截图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/nginx/safe.jpg&quot; alt=&quot;safe&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Mar 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/03/03/nginx.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/03/03/nginx.html</guid>
        
        <category>nginx</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>${}，##and%%在shell中的使用</title>
        <description>&lt;p&gt;为了完整起见，我用一些例子加以说明 ${ } 的一些特异功能：&lt;/p&gt;

&lt;p&gt;假设我们定义了一个变量为：&lt;code class=&quot;highlighter-rouge&quot;&gt;file=/dir1/dir2/dir3/my.file.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们可以用 ${ } 分别替换获得不同的值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file#*/}&lt;/code&gt;：拿掉第一条 / 及其左边的字串：dir1/dir2/dir3/my.file.txt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file##*/}&lt;/code&gt;：拿掉最后一条 / 及其左边的字串：my.file.txt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file#*.}&lt;/code&gt;：拿掉第一个 . 及其左边的字串：file.txt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file##*.}&lt;/code&gt;：拿掉最后一个 . 及其左边的字串：txt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%/*}&lt;/code&gt;：拿掉最后条 / 及其右边的字串：/dir1/dir2/dir3&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%%/*}&lt;/code&gt;：拿掉第一条 / 及其右边的字串：(空值)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%.*}&lt;/code&gt;：拿掉最后一个 . 及其右边的字串：/dir1/dir2/dir3/my.file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%%.*}&lt;/code&gt;：拿掉第一个 . 及其右边的字串：/dir1/dir2/dir3/my&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;记忆的方法为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;# 是去掉左边(在鑑盘上 # 在 $ 之左边)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\% 是去掉右边(在鑑盘上 % 在 $ 之右边)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单一符号是最小匹配﹔两个符号是最大匹配。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file:0:5}&lt;/code&gt;：提取最左边的 5 个字节：/dir1&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file:5:5}&lt;/code&gt;：提取第 5 个字节右边的连续 5 个字节：/dir2&lt;/p&gt;

&lt;p&gt;我们也可以对变量值裡的字串作替换：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file/dir/path}&lt;/code&gt;：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file//dir/path}&lt;/code&gt;：将全部 dir 提换为 path：/path1/path2/path3/my.file.txt&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;${ }&lt;/code&gt; 还可针对不同的变数状态赋值(没设定、空值、非空值)：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file-my.file.txt}&lt;/code&gt; ：假如 $file 没有设定，则使用 my.file.txt 作传回值。(空值及非空值时不作处理)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file:-my.file.txt}&lt;/code&gt; ：假如 $file 没有设定或为空值，则使用 my.file.txt 作传回值。 (非空值时不作处理)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file+my.file.txt}&lt;/code&gt; ：假如 $file 设为空值或非空值，均使用 my.file.txt 作传回值。(没设定时不作处理)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file:+my.file.txt}&lt;/code&gt; ：若 $file 为非空值，则使用 my.file.txt 作传回值。 (没设定及空值时不作处理)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file=my.file.txt}&lt;/code&gt; ：若 $file 没设定，则使用 my.file.txt 作传回值，同时将 $file 赋值为 my.file.txt 。 (空值及非空值时不作处理)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file:=my.file.txt}&lt;/code&gt; ：若 $file 没设定或为空值，则使用 my.file.txt 作传回值，同时将 $file 赋值为 my.file.txt 。 (非空值时不作处理)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file?my.file.txt}&lt;/code&gt; ：若 $file 没设定，则将 my.file.txt 输出至 STDERR。 (空值及非空值时不作处理)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file:?my.file.txt}&lt;/code&gt; ：若 $file 没设定或为空值，则将 my.file.txt 输出至 STDERR。 (非空值时不作处理)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tips:&lt;/p&gt;

&lt;p&gt;以上的理解在于, 你一定要分清楚 unset 与 null 及 non-null 这三种赋值状态.&lt;/p&gt;

&lt;p&gt;一般而言, : 与 null 有关, 若不带 : 的话, null 不受影响, 若带 : 则连 null 也受影响.&lt;/p&gt;

&lt;p&gt;还有哦，&lt;code class=&quot;highlighter-rouge&quot;&gt;${#var}&lt;/code&gt; 可计算出变量值的长度：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${#file}&lt;/code&gt; 可得到 27 ，因为 /dir1/dir2/dir3/my.file.txt 刚好是 27 个字节.&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Mar 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/03/02/shell.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/03/02/shell.html</guid>
        
        <category>shell</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Python challenge 12</title>
        <description>&lt;p&gt;Python challenge好像荒废很久了，今天把challenge 12补上。
第十二题地址为:&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/evil.html&quot;&gt;http://www.pythonchallenge.com/pc/return/evil.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打开网址，发现是一张图片很模糊，本以为还是图片处理的思路，查看网页标题和网页代码也没找到相关信息。但是在整个源代码中仔细观察会发现src是evil1.jpg，既然有1，那么是否会有2、3、4甚至更多的图呢？尝试打开：
&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/evil1.jpg&quot;&gt;http://www.pythonchallenge.com/pc/return/evil1.jpg&lt;/a&gt;是网页,
&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/evil2.jpg&quot;&gt;http://www.pythonchallenge.com/pc/return/evil2.jpg&lt;/a&gt;是下面的图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/python_challenge12/evil2.jpg&quot; alt=&quot;evil2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开网址：&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/evil2.gfx&quot;&gt;http://www.pythonchallenge.com/pc/return/evil2.gfx&lt;/a&gt; 发现是一个二进制文档，还是没什么头绪
继续打开&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/evil3.jpg&quot;&gt;http://www.pythonchallenge.com/pc/return/evil3.jpg&lt;/a&gt; 是下面的图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/python_challenge12/evil3-1.jpg&quot; alt=&quot;evil3-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看样子是没有图片了，但是打开&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/evil4.jpg&quot;&gt;http://www.pythonchallenge.com/pc/return/evil4.jpg&lt;/a&gt; 看到如下语句：&lt;strong&gt;Bert is evil! go back!&lt;/strong&gt;，在chrome浏览器是看不到的，我是在IE浏览器上看到。
回想网页开始的图片，是在均分扑克牌，这应该就是解题的思路了，那么代码很简单了，如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'evil2.gfx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;得到如下图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/python_challenge12/0.jpg&quot; alt=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/python_challenge12/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/python_challenge12/2.gif&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/python_challenge12/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jack003.com/static/img/blog/python_challenge12/4.jpg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后一张图片的字母划掉了，所以答案是：&lt;strong&gt;disproportional&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Feb 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//python/2015/02/26/python-challenge12.html</link>
        <guid isPermaLink="true">http://localhost:4000//python/2015/02/26/python-challenge12.html</guid>
        
        <category>Python</category>
        
        <category>Challenge</category>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>ssh非root用户key认证登陆及忽略known_hosts</title>
        <description>&lt;p&gt;有些时候，我们不能使用root用户在正式环境服务器操作，此时可以使用普通用户，root用户的key认证登陆设置非常简单，普通用户的key认证登陆尝试好几次总算找到了原因，最终还是文件和文件夹权限的问题，下面简单说一下具体的key认证配置方法：（假设这里有两台服务器A、B，A服务器的jack用户要实现key认证登陆B服务器）&lt;/p&gt;

&lt;p&gt;在两台服务器上建立jack用户，在A服务器的jack用户下生成jack的公私钥，然后将jack的公钥放入B服务器下jack家目录的&lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh/authorized_keys&lt;/code&gt;里。&lt;/p&gt;

&lt;p&gt;下面就是权限配置：被登录主机权限如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;chmod 755 /home/jack/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;chmod 700 /home/jack/.ssh/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;chmod 600 /home/jack/.ssh/*&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;原主机最好也做同样配置，这样就大功告成了。&lt;/p&gt;

&lt;p&gt;在平时工作中，有时候需要SSH登陆到别的Linux主机上去，但有时候SSH登陆会被禁止，并弹出如下类似提示：&lt;/p&gt;

&lt;p&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that the RSA host key has just been changed.The fingerprint for the RSA key sent by the remote host is36:68:a6:e6:43:34:6b:82:d7:f4:df:1f:c2:e7:37:cc.Please contact your system administrator.Add correct host key in /u/xlian008/.ssh/known_hosts to get rid of this message.Offending key in /u/xlian008/.ssh/known_hosts:2RSA host key for 135.1.35.130 has changed and you have requested strict checking.Host key verification failed.&lt;/p&gt;

&lt;p&gt;比较奇怪，于是研究了一下。&lt;/p&gt;

&lt;p&gt;ssh会把你每个你访问过计算机的公钥(public key)都记录在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/known_hosts&lt;/code&gt;。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack之类的攻击。我在上面列出的情况，就是这种情况。&lt;/p&gt;

&lt;p&gt;原因：一台主机上有多个Linux系统，会经常切换，那么这些系统使用同一ip，登录过一次后就会把ssh信息记录在本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/known_hsots&lt;/code&gt;文件中，切换该系统后再用ssh访问这台主机就会出现冲突警告，需要手动删除修改known_hsots里面的内容。&lt;/p&gt;

&lt;p&gt;有以下两个解决方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;手动删除修改known_hsots里面的内容；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt;，加上这两行，重启服务器。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;StrictHostKeyChecking no
UserKnownHostsFile /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/02/02/ssh-key.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/02/02/ssh-key.html</guid>
        
        <category>ssh</category>
        
        <category>key</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Top命令VIRT,RES,SHR,DATA的含义</title>
        <description>&lt;h4 id=&quot;virtvirtual-memory-usage&quot;&gt;VIRT：virtual memory usage&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等&lt;/li&gt;
  &lt;li&gt;假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;resresident-memory-usage-常驻内存&quot;&gt;RES：resident memory usage 常驻内存&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;进程当前使用的内存大小，但不包括swap out&lt;/li&gt;
  &lt;li&gt;包含其他进程的共享&lt;/li&gt;
  &lt;li&gt;如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反&lt;/li&gt;
  &lt;li&gt;关于库占用内存的情况，它只统计加载的库文件所占内存大小&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;shrshared-memory&quot;&gt;SHR：shared memory&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;除了自身进程的共享内存，也包括其他进程的共享内存&lt;/li&gt;
  &lt;li&gt;虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小&lt;/li&gt;
  &lt;li&gt;计算某个进程所占的物理内存大小公式：RES – SHR&lt;/li&gt;
  &lt;li&gt;swap out后，它将会降下来&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;data&quot;&gt;DATA&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;数据占用的内存。如果top没有显示，按f键可以显示出来。&lt;/li&gt;
  &lt;li&gt;真正的该程序要求的数据空间，是真正在运行中要使用的。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/02/02/Top_command-VIRT-RES-SHR-DATA.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/02/02/Top_command-VIRT-RES-SHR-DATA.html</guid>
        
        <category>top</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>RHEL的EPEL源地址及安装</title>
        <description>&lt;p&gt;RHEL6:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@test ~]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-5.noarch.rpm
[root@test ~]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;RHEL5:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@test ~]# rpm -ivh http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
[root@test ~]# rpm -ivh  http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;EPEL版本不同，根据不同系统请自行安装。&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//linux/2015/01/13/linux-epel.html</link>
        <guid isPermaLink="true">http://localhost:4000//linux/2015/01/13/linux-epel.html</guid>
        
        <category>epel</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>我的第一篇博客</title>
        <description>&lt;p&gt;喜欢写Blog的人，会经历三个阶段。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。
第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。
第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;转自&lt;a href=&quot;http://www.ruanyifeng.com/&quot;&gt;阮一峰&lt;/a&gt;的博文。&lt;/p&gt;

&lt;p&gt;从第一份运维工作开始，就开始写笔记，有用过印象笔记，有道云笔记，gist，后来也开始写博客，那时候是在CSDN上面注册了一个账号，写了有几个月见见的也荒废了；再后来，想自己搞个云主机，在&lt;a href=&quot;http://aliyun.com&quot;&gt;阿里云&lt;/a&gt;上租了一台主机，一个月￥60，先是用wordpress，感觉可定制功能不强，因为是PHP写的，个人主要学习Python，所以感觉自己用Django写了一个博客，在15年双十一，云主机降价，花了一半的价钱（￥200）在美团云上买了一台1C、1G、1MB带宽的主机，至此也了解了阿里云和美团云的一些不同之处，美团云主打的是纯净的系统，而阿里云应用市场比较丰富。现在准备把自己的博客迁移到&lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt;上，在学习了markdown入门和jekyll基础后，目前博客已经初步成立，同时完善了我的一些文章，希望今后能够勤写文章。&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://localhost:4000//life/2015/01/08/first-blog.html</link>
        <guid isPermaLink="true">http://localhost:4000//life/2015/01/08/first-blog.html</guid>
        
        <category>blog</category>
        
        
        <category>Life</category>
        
      </item>
    
  </channel>
</rss>
